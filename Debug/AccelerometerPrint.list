
AccelerometerPrint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004358  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800456c  0800456c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800456c  0800456c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800456c  0800456c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800456c  0800456c  0001456c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000454  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004c4  200004c4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118b8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021be  00000000  00000000  00031958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00033b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c90  00000000  00000000  00034880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d916  00000000  00000000  00035510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b58  00000000  00000000  00052e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3e06  00000000  00000000  0006497e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118784  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c2c  00000000  00000000  001187d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044d0 	.word	0x080044d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080044d0 	.word	0x080044d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d013      	beq.n	80002c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00b      	beq.n	80002c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002a8:	e000      	b.n	80002ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80002aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	b2d2      	uxtb	r2, r2
 80002be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <print>:
static void MX_UART4_Init(void);
static void MX_USB_PCD_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

int print(char * string) {
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b084      	sub	sp, #16
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
	for (int i = 0 ; i < strlen(string); i++) {
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	e009      	b.n	80002f0 <print+0x22>
		ITM_SendChar(string[i]);
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	4413      	add	r3, r2
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f7ff ffcb 	bl	8000280 <ITM_SendChar>
	for (int i = 0 ; i < strlen(string); i++) {
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	3301      	adds	r3, #1
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f7ff ff6d 	bl	80001d0 <strlen>
 80002f6:	4602      	mov	r2, r0
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d8ee      	bhi.n	80002dc <print+0xe>
	}
	return 1;
 80002fe:	2301      	movs	r3, #1
}
 8000300:	4618      	mov	r0, r3
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08c      	sub	sp, #48	; 0x30
 800030c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030e:	f000 fbc3 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000312:	f000 f83b 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000316:	f000 f96d 	bl	80005f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800031a:	f000 f8d9 	bl	80004d0 <MX_SPI1_Init>
  MX_UART4_Init();
 800031e:	f000 f915 	bl	800054c <MX_UART4_Init>
  MX_USB_PCD_Init();
 8000322:	f000 f945 	bl	80005b0 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8000326:	f000 f893 	bl	8000450 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_StatusTypeDef ret;
  uint16_t accel_address = 0x33;
 800032a:	2333      	movs	r3, #51	; 0x33
 800032c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t buf[12];
  while (1)
  {
	print("Try\n");
 800032e:	4814      	ldr	r0, [pc, #80]	; (8000380 <main+0x78>)
 8000330:	f7ff ffcd 	bl	80002ce <print>
	ret = HAL_I2C_Master_Transmit(&hi2c1, accel_address, buf, 1, HAL_MAX_DELAY);
 8000334:	f107 0218 	add.w	r2, r7, #24
 8000338:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800033a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	2301      	movs	r3, #1
 8000342:	4810      	ldr	r0, [pc, #64]	; (8000384 <main+0x7c>)
 8000344:	f000 ff3a 	bl	80011bc <HAL_I2C_Master_Transmit>
 8000348:	4603      	mov	r3, r0
 800034a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	char string[20]= "";
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
	sprintf(string,"status is : %x\n",ret);
 8000360:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4908      	ldr	r1, [pc, #32]	; (8000388 <main+0x80>)
 8000368:	4618      	mov	r0, r3
 800036a:	f003 fc43 	bl	8003bf4 <siprintf>
	print(string);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ffac 	bl	80002ce <print>
	HAL_Delay(500);
 8000376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800037a:	f000 fbf3 	bl	8000b64 <HAL_Delay>
  {
 800037e:	e7d6      	b.n	800032e <main+0x26>
 8000380:	080044e8 	.word	0x080044e8
 8000384:	2000008c 	.word	0x2000008c
 8000388:	080044f0 	.word	0x080044f0

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b09e      	sub	sp, #120	; 0x78
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f003 fc22 	bl	8003be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b0:	463b      	mov	r3, r7
 80003b2:	223c      	movs	r2, #60	; 0x3c
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 fc14 	bl	8003be4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003bc:	2303      	movs	r3, #3
 80003be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ca:	2301      	movs	r3, #1
 80003cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ce:	2310      	movs	r3, #16
 80003d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 fad6 	bl	8001998 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003f2:	f000 f97d 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f002 fafe 	bl	8002a14 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800041e:	f000 f967 	bl	80006f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <SystemClock_Config+0xc0>)
 8000424:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800042e:	2300      	movs	r3, #0
 8000430:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000432:	463b      	mov	r3, r7
 8000434:	4618      	mov	r0, r3
 8000436:	f002 fd23 	bl	8002e80 <HAL_RCCEx_PeriphCLKConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000440:	f000 f956 	bl	80006f0 <Error_Handler>
  }
}
 8000444:	bf00      	nop
 8000446:	3778      	adds	r7, #120	; 0x78
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	00020028 	.word	0x00020028

08000450 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000456:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <MX_I2C1_Init+0x78>)
 8000458:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800045a:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <MX_I2C1_Init+0x74>)
 800045c:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <MX_I2C1_Init+0x7c>)
 800045e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000460:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000468:	2201      	movs	r2, #1
 800046a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800046c:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <MX_I2C1_Init+0x74>)
 800048c:	f000 fe06 	bl	800109c <HAL_I2C_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000496:	f000 f92b 	bl	80006f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800049a:	2100      	movs	r1, #0
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <MX_I2C1_Init+0x74>)
 800049e:	f001 f905 	bl	80016ac <HAL_I2CEx_ConfigAnalogFilter>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004a8:	f000 f922 	bl	80006f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004ac:	2100      	movs	r1, #0
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_I2C1_Init+0x74>)
 80004b0:	f001 f947 	bl	8001742 <HAL_I2CEx_ConfigDigitalFilter>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ba:	f000 f919 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000008c 	.word	0x2000008c
 80004c8:	40005400 	.word	0x40005400
 80004cc:	2000090e 	.word	0x2000090e

080004d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_SPI1_Init+0x74>)
 80004d6:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <MX_SPI1_Init+0x78>)
 80004d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004da:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <MX_SPI1_Init+0x74>)
 80004dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_SPI1_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <MX_SPI1_Init+0x74>)
 80004ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_SPI1_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <MX_SPI1_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_SPI1_Init+0x74>)
 80004fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000502:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_SPI1_Init+0x74>)
 8000506:	2208      	movs	r2, #8
 8000508:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <MX_SPI1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <MX_SPI1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_SPI1_Init+0x74>)
 800051e:	2207      	movs	r2, #7
 8000520:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <MX_SPI1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <MX_SPI1_Init+0x74>)
 800052a:	2208      	movs	r2, #8
 800052c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_SPI1_Init+0x74>)
 8000530:	f002 fe56 	bl	80031e0 <HAL_SPI_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800053a:	f000 f8d9 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200000d8 	.word	0x200000d8
 8000548:	40013000 	.word	0x40013000

0800054c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_UART4_Init+0x5c>)
 8000552:	4a16      	ldr	r2, [pc, #88]	; (80005ac <MX_UART4_Init+0x60>)
 8000554:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_UART4_Init+0x5c>)
 8000558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800055c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_UART4_Init+0x5c>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_UART4_Init+0x5c>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_UART4_Init+0x5c>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <MX_UART4_Init+0x5c>)
 8000572:	220c      	movs	r2, #12
 8000574:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_UART4_Init+0x5c>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_UART4_Init+0x5c>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_UART4_Init+0x5c>)
 8000584:	2200      	movs	r2, #0
 8000586:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <MX_UART4_Init+0x5c>)
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_MultiProcessor_Init(&huart4, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_UART4_Init+0x5c>)
 8000594:	f002 fecf 	bl	8003336 <HAL_MultiProcessor_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800059e:	f000 f8a7 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000013c 	.word	0x2000013c
 80005ac:	40004c00 	.word	0x40004c00

080005b0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <MX_USB_PCD_Init+0x3c>)
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <MX_USB_PCD_Init+0x40>)
 80005b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_USB_PCD_Init+0x3c>)
 80005bc:	2208      	movs	r2, #8
 80005be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <MX_USB_PCD_Init+0x3c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_USB_PCD_Init+0x3c>)
 80005c8:	2202      	movs	r2, #2
 80005ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <MX_USB_PCD_Init+0x3c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_USB_PCD_Init+0x3c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_USB_PCD_Init+0x3c>)
 80005da:	f001 f8fe 	bl	80017da <HAL_PCD_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005e4:	f000 f884 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200001c0 	.word	0x200001c0
 80005f0:	40005c00 	.word	0x40005c00

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800060a:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <MX_GPIO_Init+0xf4>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a36      	ldr	r2, [pc, #216]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a30      	ldr	r2, [pc, #192]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000628:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <MX_GPIO_Init+0xf4>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a24      	ldr	r2, [pc, #144]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_GPIO_Init+0xf4>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a1e      	ldr	r2, [pc, #120]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_GPIO_Init+0xf4>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000682:	2200      	movs	r2, #0
 8000684:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000688:	4818      	ldr	r0, [pc, #96]	; (80006ec <MX_GPIO_Init+0xf8>)
 800068a:	f000 fcef 	bl	800106c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800068e:	2337      	movs	r3, #55	; 0x37
 8000690:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000692:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	4812      	ldr	r0, [pc, #72]	; (80006ec <MX_GPIO_Init+0xf8>)
 80006a4:	f000 fb68 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006a8:	f64f 7308 	movw	r3, #65288	; 0xff08
 80006ac:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	480a      	ldr	r0, [pc, #40]	; (80006ec <MX_GPIO_Init+0xf8>)
 80006c2:	f000 fb59 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c6:	2301      	movs	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f000 fb4c 	bl	8000d78 <HAL_GPIO_Init>

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	; 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48001000 	.word	0x48001000

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x44>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x44>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x44>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x44>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_MspInit+0x44>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_MspInit+0x44>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000732:	2007      	movs	r0, #7
 8000734:	f000 faec 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <HAL_I2C_MspInit+0x7c>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d127      	bne.n	80007b6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_I2C_MspInit+0x80>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <HAL_I2C_MspInit+0x80>)
 800076c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_I2C_MspInit+0x80>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800077e:	23c0      	movs	r3, #192	; 0xc0
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000782:	2312      	movs	r3, #18
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000786:	2301      	movs	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078e:	2304      	movs	r3, #4
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <HAL_I2C_MspInit+0x84>)
 800079a:	f000 faed 	bl	8000d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_I2C_MspInit+0x80>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_I2C_MspInit+0x80>)
 80007a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_I2C_MspInit+0x80>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007b6:	bf00      	nop
 80007b8:	3728      	adds	r7, #40	; 0x28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40005400 	.word	0x40005400
 80007c4:	40021000 	.word	0x40021000
 80007c8:	48000400 	.word	0x48000400

080007cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_SPI_MspInit+0x7c>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d128      	bne.n	8000840 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <HAL_SPI_MspInit+0x80>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a16      	ldr	r2, [pc, #88]	; (800084c <HAL_SPI_MspInit+0x80>)
 80007f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_SPI_MspInit+0x80>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_SPI_MspInit+0x80>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <HAL_SPI_MspInit+0x80>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_SPI_MspInit+0x80>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800081e:	23e0      	movs	r3, #224	; 0xe0
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800082e:	2305      	movs	r3, #5
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083c:	f000 fa9c 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40013000 	.word	0x40013000
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_UART_MspInit+0x7c>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d128      	bne.n	80008c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0x80>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <HAL_UART_MspInit+0x80>)
 8000878:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0x80>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0x80>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <HAL_UART_MspInit+0x80>)
 8000890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_UART_MspInit+0x80>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a8:	2312      	movs	r3, #18
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80008b4:	2305      	movs	r3, #5
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <HAL_UART_MspInit+0x84>)
 80008c0:	f000 fa5a 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40004c00 	.word	0x40004c00
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000800 	.word	0x48000800

080008d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a18      	ldr	r2, [pc, #96]	; (8000958 <HAL_PCD_MspInit+0x80>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d129      	bne.n	800094e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <HAL_PCD_MspInit+0x84>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <HAL_PCD_MspInit+0x84>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_PCD_MspInit+0x84>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000912:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000924:	230e      	movs	r3, #14
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f000 fa21 	bl	8000d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_PCD_MspInit+0x84>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_PCD_MspInit+0x84>)
 800093c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_PCD_MspInit+0x84>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40005c00 	.word	0x40005c00
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f8ba 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f003 f8d4 	bl	8003b90 <__errno>
 80009e8:	4603      	mov	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <_sbrk+0x64>)
 8000a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000a000 	.word	0x2000a000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	200004ac 	.word	0x200004ac
 8000a1c:	200004c8 	.word	0x200004c8

08000a20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0b      	ldr	r4, [pc, #44]	; (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a6e:	f7ff ffd7 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f003 f893 	bl	8003b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a76:	f7ff fc47 	bl	8000308 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a7c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a88:	08004574 	.word	0x08004574
  ldr r2, =_sbss
 8000a8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a90:	200004c4 	.word	0x200004c4

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x28>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x28>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f931 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff fe22 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f93b 	bl	8000d5e <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b00:	f000 f911 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	200004b0 	.word	0x200004b0

08000b4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200004b0 	.word	0x200004b0

08000b64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff ffee 	bl	8000b4c <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffde 	bl	8000b4c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_SetPriorityGrouping>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_SetPriority>:
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff47 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff5c 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff8e 	bl	8000c64 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffb0 	bl	8000ccc <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d86:	e154      	b.n	8001032 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 8146 	beq.w	800102c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d005      	beq.n	8000db8 <HAL_GPIO_Init+0x40>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d130      	bne.n	8000e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dee:	2201      	movs	r2, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	f003 0201 	and.w	r2, r3, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d017      	beq.n	8000e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d123      	bne.n	8000eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	6939      	ldr	r1, [r7, #16]
 8000ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0203 	and.w	r2, r3, #3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 80a0 	beq.w	800102c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	4b58      	ldr	r3, [pc, #352]	; (8001050 <HAL_GPIO_Init+0x2d8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a57      	ldr	r2, [pc, #348]	; (8001050 <HAL_GPIO_Init+0x2d8>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b55      	ldr	r3, [pc, #340]	; (8001050 <HAL_GPIO_Init+0x2d8>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f04:	4a53      	ldr	r2, [pc, #332]	; (8001054 <HAL_GPIO_Init+0x2dc>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f2e:	d019      	beq.n	8000f64 <HAL_GPIO_Init+0x1ec>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a49      	ldr	r2, [pc, #292]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d013      	beq.n	8000f60 <HAL_GPIO_Init+0x1e8>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a48      	ldr	r2, [pc, #288]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d00d      	beq.n	8000f5c <HAL_GPIO_Init+0x1e4>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a47      	ldr	r2, [pc, #284]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d007      	beq.n	8000f58 <HAL_GPIO_Init+0x1e0>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a46      	ldr	r2, [pc, #280]	; (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d101      	bne.n	8000f54 <HAL_GPIO_Init+0x1dc>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e008      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f54:	2305      	movs	r3, #5
 8000f56:	e006      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e004      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e002      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f64:	2300      	movs	r3, #0
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	f002 0203 	and.w	r2, r2, #3
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	4093      	lsls	r3, r2
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f76:	4937      	ldr	r1, [pc, #220]	; (8001054 <HAL_GPIO_Init+0x2dc>)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f84:	4b38      	ldr	r3, [pc, #224]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fa8:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd2:	4a25      	ldr	r2, [pc, #148]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	fa22 f303 	lsr.w	r3, r2, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	f47f aea3 	bne.w	8000d88 <HAL_GPIO_Init+0x10>
  }
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000
 8001058:	48000400 	.word	0x48000400
 800105c:	48000800 	.word	0x48000800
 8001060:	48000c00 	.word	0x48000c00
 8001064:	48001000 	.word	0x48001000
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001088:	e002      	b.n	8001090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e081      	b.n	80011b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d106      	bne.n	80010c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fb3e 	bl	8000744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2224      	movs	r2, #36	; 0x24
 80010cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d107      	bne.n	8001116 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	e006      	b.n	8001124 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001122:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d104      	bne.n	8001136 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001134:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001148:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001158:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69d9      	ldr	r1, [r3, #28]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0201 	orr.w	r2, r2, #1
 8001192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2220      	movs	r2, #32
 800119e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	461a      	mov	r2, r3
 80011c8:	460b      	mov	r3, r1
 80011ca:	817b      	strh	r3, [r7, #10]
 80011cc:	4613      	mov	r3, r2
 80011ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b20      	cmp	r3, #32
 80011da:	f040 80da 	bne.w	8001392 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_I2C_Master_Transmit+0x30>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e0d3      	b.n	8001394 <HAL_I2C_Master_Transmit+0x1d8>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011f4:	f7ff fcaa 	bl	8000b4c <HAL_GetTick>
 80011f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2319      	movs	r3, #25
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f000 f8f0 	bl	80013ec <I2C_WaitOnFlagUntilTimeout>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0be      	b.n	8001394 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2221      	movs	r2, #33	; 0x21
 800121a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2210      	movs	r2, #16
 8001222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	893a      	ldrh	r2, [r7, #8]
 8001236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001242:	b29b      	uxth	r3, r3
 8001244:	2bff      	cmp	r3, #255	; 0xff
 8001246:	d90e      	bls.n	8001266 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001252:	b2da      	uxtb	r2, r3
 8001254:	8979      	ldrh	r1, [r7, #10]
 8001256:	4b51      	ldr	r3, [pc, #324]	; (800139c <HAL_I2C_Master_Transmit+0x1e0>)
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 f9f6 	bl	8001650 <I2C_TransferConfig>
 8001264:	e06c      	b.n	8001340 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126a:	b29a      	uxth	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001274:	b2da      	uxtb	r2, r3
 8001276:	8979      	ldrh	r1, [r7, #10]
 8001278:	4b48      	ldr	r3, [pc, #288]	; (800139c <HAL_I2C_Master_Transmit+0x1e0>)
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 f9e5 	bl	8001650 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001286:	e05b      	b.n	8001340 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	6a39      	ldr	r1, [r7, #32]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 f8ed 	bl	800146c <I2C_WaitOnTXISFlagUntilTimeout>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e07b      	b.n	8001394 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d034      	beq.n	8001340 <HAL_I2C_Master_Transmit+0x184>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d130      	bne.n	8001340 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	2200      	movs	r2, #0
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 f87f 	bl	80013ec <I2C_WaitOnFlagUntilTimeout>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e04d      	b.n	8001394 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	2bff      	cmp	r3, #255	; 0xff
 8001300:	d90e      	bls.n	8001320 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	22ff      	movs	r2, #255	; 0xff
 8001306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800130c:	b2da      	uxtb	r2, r3
 800130e:	8979      	ldrh	r1, [r7, #10]
 8001310:	2300      	movs	r3, #0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f999 	bl	8001650 <I2C_TransferConfig>
 800131e:	e00f      	b.n	8001340 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001324:	b29a      	uxth	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132e:	b2da      	uxtb	r2, r3
 8001330:	8979      	ldrh	r1, [r7, #10]
 8001332:	2300      	movs	r3, #0
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 f988 	bl	8001650 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001344:	b29b      	uxth	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d19e      	bne.n	8001288 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	6a39      	ldr	r1, [r7, #32]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 f8cc 	bl	80014ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e01a      	b.n	8001394 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2220      	movs	r2, #32
 8001364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001372:	400b      	ands	r3, r1
 8001374:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2220      	movs	r2, #32
 800137a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001392:	2302      	movs	r3, #2
  }
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	80002000 	.word	0x80002000
 80013a0:	fe00e800 	.word	0xfe00e800

080013a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d103      	bne.n	80013c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d007      	beq.n	80013e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699a      	ldr	r2, [r3, #24]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0201 	orr.w	r2, r2, #1
 80013de:	619a      	str	r2, [r3, #24]
  }
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013fc:	e022      	b.n	8001444 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001404:	d01e      	beq.n	8001444 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001406:	f7ff fba1 	bl	8000b4c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d302      	bcc.n	800141c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d113      	bne.n	8001444 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	f043 0220 	orr.w	r2, r3, #32
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2220      	movs	r2, #32
 800142c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e00f      	b.n	8001464 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	4013      	ands	r3, r2
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	429a      	cmp	r2, r3
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	429a      	cmp	r2, r3
 8001460:	d0cd      	beq.n	80013fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001478:	e02c      	b.n	80014d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f870 	bl	8001564 <I2C_IsAcknowledgeFailed>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e02a      	b.n	80014e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001494:	d01e      	beq.n	80014d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001496:	f7ff fb59 	bl	8000b4c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d302      	bcc.n	80014ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d113      	bne.n	80014d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b0:	f043 0220 	orr.w	r2, r3, #32
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2220      	movs	r2, #32
 80014bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e007      	b.n	80014e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d1cb      	bne.n	800147a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014f8:	e028      	b.n	800154c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 f830 	bl	8001564 <I2C_IsAcknowledgeFailed>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e026      	b.n	800155c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800150e:	f7ff fb1d 	bl	8000b4c <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	429a      	cmp	r2, r3
 800151c:	d302      	bcc.n	8001524 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d113      	bne.n	800154c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f043 0220 	orr.w	r2, r3, #32
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2220      	movs	r2, #32
 8001534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e007      	b.n	800155c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0320 	and.w	r3, r3, #32
 8001556:	2b20      	cmp	r3, #32
 8001558:	d1cf      	bne.n	80014fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b10      	cmp	r3, #16
 800157c:	d161      	bne.n	8001642 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800158c:	d02b      	beq.n	80015e6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800159c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800159e:	e022      	b.n	80015e6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a6:	d01e      	beq.n	80015e6 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a8:	f7ff fad0 	bl	8000b4c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d302      	bcc.n	80015be <I2C_IsAcknowledgeFailed+0x5a>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d113      	bne.n	80015e6 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f043 0220 	orr.w	r2, r3, #32
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2220      	movs	r2, #32
 80015ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e02e      	b.n	8001644 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d1d5      	bne.n	80015a0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2210      	movs	r2, #16
 80015fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2220      	movs	r2, #32
 8001602:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff fecd 	bl	80013a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <I2C_IsAcknowledgeFailed+0xe8>)
 8001616:	400b      	ands	r3, r1
 8001618:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f043 0204 	orr.w	r2, r3, #4
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2220      	movs	r2, #32
 800162a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	fe00e800 	.word	0xfe00e800

08001650 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	817b      	strh	r3, [r7, #10]
 800165e:	4613      	mov	r3, r2
 8001660:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	0d5b      	lsrs	r3, r3, #21
 800166c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <I2C_TransferConfig+0x58>)
 8001672:	430b      	orrs	r3, r1
 8001674:	43db      	mvns	r3, r3
 8001676:	ea02 0103 	and.w	r1, r2, r3
 800167a:	897b      	ldrh	r3, [r7, #10]
 800167c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001680:	7a7b      	ldrb	r3, [r7, #9]
 8001682:	041b      	lsls	r3, r3, #16
 8001684:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	431a      	orrs	r2, r3
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	03ff63ff 	.word	0x03ff63ff

080016ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d138      	bne.n	8001734 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e032      	b.n	8001736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2224      	movs	r2, #36	; 0x24
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e000      	b.n	8001736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001734:	2302      	movs	r3, #2
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001742:	b480      	push	{r7}
 8001744:	b085      	sub	sp, #20
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b20      	cmp	r3, #32
 8001756:	d139      	bne.n	80017cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001762:	2302      	movs	r3, #2
 8001764:	e033      	b.n	80017ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2224      	movs	r2, #36	; 0x24
 8001772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001794:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2220      	movs	r2, #32
 80017bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e000      	b.n	80017ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017cc:	2302      	movs	r3, #2
  }
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017dc:	b08b      	sub	sp, #44	; 0x2c
 80017de:	af06      	add	r7, sp, #24
 80017e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0d0      	b.n	800198e <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d106      	bne.n	8001806 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff f869 	bl	80008d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2203      	movs	r2, #3
 800180a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f002 f97f 	bl	8003b16 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e04c      	b.n	80018b8 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3301      	adds	r3, #1
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	b298      	uxth	r0, r3
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3336      	adds	r3, #54	; 0x36
 800185c:	4602      	mov	r2, r0
 800185e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3303      	adds	r3, #3
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3338      	adds	r3, #56	; 0x38
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	333c      	adds	r3, #60	; 0x3c
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	3340      	adds	r3, #64	; 0x40
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	3301      	adds	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d3ad      	bcc.n	800181e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e044      	b.n	8001952 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	3301      	adds	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	d3b5      	bcc.n	80018c8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	687e      	ldr	r6, [r7, #4]
 8001964:	466d      	mov	r5, sp
 8001966:	f106 0410 	add.w	r4, r6, #16
 800196a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	602b      	str	r3, [r5, #0]
 8001972:	1d33      	adds	r3, r6, #4
 8001974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001976:	6838      	ldr	r0, [r7, #0]
 8001978:	f002 f8e8 	bl	8003b4c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800199e:	af00      	add	r7, sp, #0
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f001 b823 	b.w	8002a04 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 817d 	beq.w	8001cce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019d4:	4bbc      	ldr	r3, [pc, #752]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d00c      	beq.n	80019fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e0:	4bb9      	ldr	r3, [pc, #740]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d15c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x10e>
 80019ec:	4bb6      	ldr	r3, [pc, #728]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d155      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x10e>
 80019fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	095b      	lsrs	r3, r3, #5
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d102      	bne.n	8001a2c <HAL_RCC_OscConfig+0x94>
 8001a26:	4ba8      	ldr	r3, [pc, #672]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	e015      	b.n	8001a58 <HAL_RCC_OscConfig+0xc0>
 8001a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a30:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a48:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a54:	4b9c      	ldr	r3, [pc, #624]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a5c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a60:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a64:	fa92 f2a2 	rbit	r2, r2
 8001a68:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a6c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a70:	fab2 f282 	clz	r2, r2
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f042 0220 	orr.w	r2, r2, #32
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f002 021f 	and.w	r2, r2, #31
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 811f 	beq.w	8001ccc <HAL_RCC_OscConfig+0x334>
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8116 	bne.w	8001ccc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f000 bfaf 	b.w	8002a04 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x12e>
 8001ab8:	4b83      	ldr	r3, [pc, #524]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a82      	ldr	r2, [pc, #520]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e036      	b.n	8001b34 <HAL_RCC_OscConfig+0x19c>
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x158>
 8001ad6:	4b7c      	ldr	r3, [pc, #496]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a7b      	ldr	r2, [pc, #492]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a78      	ldr	r2, [pc, #480]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e021      	b.n	8001b34 <HAL_RCC_OscConfig+0x19c>
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x184>
 8001b02:	4b71      	ldr	r3, [pc, #452]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a70      	ldr	r2, [pc, #448]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6d      	ldr	r2, [pc, #436]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0x19c>
 8001b1c:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a66      	ldr	r2, [pc, #408]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b34:	4b64      	ldr	r3, [pc, #400]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	f023 020f 	bic.w	r2, r3, #15
 8001b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	495f      	ldr	r1, [pc, #380]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d059      	beq.n	8001c12 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fff5 	bl	8000b4c <HAL_GetTick>
 8001b62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7fe fff0 	bl	8000b4c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b64      	cmp	r3, #100	; 0x64
 8001b76:	d902      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	f000 bf43 	b.w	8002a04 <HAL_RCC_OscConfig+0x106c>
 8001b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b82:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d102      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x218>
 8001baa:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	e015      	b.n	8001bdc <HAL_RCC_OscConfig+0x244>
 8001bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001bcc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001be0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001be4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001be8:	fa92 f2a2 	rbit	r2, r2
 8001bec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001bf0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001bf4:	fab2 f282 	clz	r2, r2
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	f042 0220 	orr.w	r2, r2, #32
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	f002 021f 	and.w	r2, r2, #31
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ab      	beq.n	8001b68 <HAL_RCC_OscConfig+0x1d0>
 8001c10:	e05d      	b.n	8001cce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7fe ff9b 	bl	8000b4c <HAL_GetTick>
 8001c16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7fe ff96 	bl	8000b4c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b64      	cmp	r3, #100	; 0x64
 8001c2a:	d902      	bls.n	8001c32 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	f000 bee9 	b.w	8002a04 <HAL_RCC_OscConfig+0x106c>
 8001c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c36:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c46:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d102      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2cc>
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	e015      	b.n	8001c90 <HAL_RCC_OscConfig+0x2f8>
 8001c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c68:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c80:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_RCC_OscConfig+0x330>)
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c94:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c98:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c9c:	fa92 f2a2 	rbit	r2, r2
 8001ca0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ca4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f042 0220 	orr.w	r2, r2, #32
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f002 021f 	and.w	r2, r2, #31
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ab      	bne.n	8001c1c <HAL_RCC_OscConfig+0x284>
 8001cc4:	e003      	b.n	8001cce <HAL_RCC_OscConfig+0x336>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 817d 	beq.w	8001fde <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ce4:	4ba6      	ldr	r3, [pc, #664]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00b      	beq.n	8001d08 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cf0:	4ba3      	ldr	r3, [pc, #652]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d172      	bne.n	8001de2 <HAL_RCC_OscConfig+0x44a>
 8001cfc:	4ba0      	ldr	r3, [pc, #640]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d16c      	bne.n	8001de2 <HAL_RCC_OscConfig+0x44a>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d1a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3a0>
 8001d32:	4b93      	ldr	r3, [pc, #588]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0x3c8>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d5c:	4b88      	ldr	r3, [pc, #544]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	2202      	movs	r2, #2
 8001d62:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d66:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d6a:	fa92 f2a2 	rbit	r2, r2
 8001d6e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d72:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f042 0220 	orr.w	r2, r2, #32
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f002 021f 	and.w	r2, r2, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <HAL_RCC_OscConfig+0x410>
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d002      	beq.n	8001da8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f000 be2e 	b.w	8002a04 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b75      	ldr	r3, [pc, #468]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	21f8      	movs	r1, #248	; 0xf8
 8001dbe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001dc6:	fa91 f1a1 	rbit	r1, r1
 8001dca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001dce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001dd2:	fab1 f181 	clz	r1, r1
 8001dd6:	b2c9      	uxtb	r1, r1
 8001dd8:	408b      	lsls	r3, r1
 8001dda:	4969      	ldr	r1, [pc, #420]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de0:	e0fd      	b.n	8001fde <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8088 	beq.w	8001f04 <HAL_RCC_OscConfig+0x56c>
 8001df4:	2301      	movs	r3, #1
 8001df6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7fe fe94 	bl	8000b4c <HAL_GetTick>
 8001e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7fe fe8f 	bl	8000b4c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d902      	bls.n	8001e40 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	f000 bde2 	b.w	8002a04 <HAL_RCC_OscConfig+0x106c>
 8001e40:	2302      	movs	r3, #2
 8001e42:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d102      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4d8>
 8001e6a:	4b45      	ldr	r3, [pc, #276]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	e013      	b.n	8001e98 <HAL_RCC_OscConfig+0x500>
 8001e70:	2302      	movs	r3, #2
 8001e72:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e82:	2302      	movs	r3, #2
 8001e84:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e88:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e94:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e9e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ea2:	fa92 f2a2 	rbit	r2, r2
 8001ea6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001eaa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001eae:	fab2 f282 	clz	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f042 0220 	orr.w	r2, r2, #32
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f002 021f 	and.w	r2, r2, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0af      	beq.n	8001e2a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	21f8      	movs	r1, #248	; 0xf8
 8001ee0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ee8:	fa91 f1a1 	rbit	r1, r1
 8001eec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ef0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ef4:	fab1 f181 	clz	r1, r1
 8001ef8:	b2c9      	uxtb	r1, r1
 8001efa:	408b      	lsls	r3, r1
 8001efc:	4920      	ldr	r1, [pc, #128]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
 8001f02:	e06c      	b.n	8001fde <HAL_RCC_OscConfig+0x646>
 8001f04:	2301      	movs	r3, #1
 8001f06:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe fe0c 	bl	8000b4c <HAL_GetTick>
 8001f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7fe fe07 	bl	8000b4c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d902      	bls.n	8001f50 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	f000 bd5a 	b.w	8002a04 <HAL_RCC_OscConfig+0x106c>
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d104      	bne.n	8001f84 <HAL_RCC_OscConfig+0x5ec>
 8001f7a:	4b01      	ldr	r3, [pc, #4]	; (8001f80 <HAL_RCC_OscConfig+0x5e8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	e015      	b.n	8001fac <HAL_RCC_OscConfig+0x614>
 8001f80:	40021000 	.word	0x40021000
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f96:	2302      	movs	r3, #2
 8001f98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001fa8:	4bc8      	ldr	r3, [pc, #800]	; (80022cc <HAL_RCC_OscConfig+0x934>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	2202      	movs	r2, #2
 8001fae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001fb2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001fb6:	fa92 f2a2 	rbit	r2, r2
 8001fba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001fbe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fc2:	fab2 f282 	clz	r2, r2
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f042 0220 	orr.w	r2, r2, #32
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	f002 021f 	and.w	r2, r2, #31
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1ad      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8110 	beq.w	8002214 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d079      	beq.n	80020f8 <HAL_RCC_OscConfig+0x760>
 8002004:	2301      	movs	r3, #1
 8002006:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	4bab      	ldr	r3, [pc, #684]	; (80022d0 <HAL_RCC_OscConfig+0x938>)
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	461a      	mov	r2, r3
 800202a:	2301      	movs	r3, #1
 800202c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7fe fd8d 	bl	8000b4c <HAL_GetTick>
 8002032:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002038:	f7fe fd88 	bl	8000b4c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d902      	bls.n	800204e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	f000 bcdb 	b.w	8002a04 <HAL_RCC_OscConfig+0x106c>
 800204e:	2302      	movs	r3, #2
 8002050:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002068:	2202      	movs	r2, #2
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800208c:	2202      	movs	r2, #2
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	fa93 f2a3 	rbit	r2, r3
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a8:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x934>)
 80020aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020b4:	2102      	movs	r1, #2
 80020b6:	6019      	str	r1, [r3, #0]
 80020b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fa93 f1a3 	rbit	r1, r3
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020ce:	6019      	str	r1, [r3, #0]
  return result;
 80020d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0a0      	beq.n	8002038 <HAL_RCC_OscConfig+0x6a0>
 80020f6:	e08d      	b.n	8002214 <HAL_RCC_OscConfig+0x87c>
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800211a:	601a      	str	r2, [r3, #0]
  return result;
 800211c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002120:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002124:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x938>)
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	461a      	mov	r2, r3
 8002136:	2300      	movs	r3, #0
 8002138:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7fe fd07 	bl	8000b4c <HAL_GetTick>
 800213e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe fd02 	bl	8000b4c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d902      	bls.n	800215a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	f000 bc55 	b.w	8002a04 <HAL_RCC_OscConfig+0x106c>
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002162:	2202      	movs	r2, #2
 8002164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f2a3 	rbit	r2, r3
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002186:	2202      	movs	r2, #2
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fa93 f2a3 	rbit	r2, r3
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021aa:	2202      	movs	r2, #2
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fa93 f2a3 	rbit	r2, r3
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80021c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_OscConfig+0x934>)
 80021c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021d2:	2102      	movs	r1, #2
 80021d4:	6019      	str	r1, [r3, #0]
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f1a3 	rbit	r1, r3
 80021e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021ec:	6019      	str	r1, [r3, #0]
  return result;
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	2101      	movs	r1, #1
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d197      	bne.n	8002144 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 81a1 	beq.w	800256c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_RCC_OscConfig+0x934>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d116      	bne.n	800226a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_RCC_OscConfig+0x934>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	4a22      	ldr	r2, [pc, #136]	; (80022cc <HAL_RCC_OscConfig+0x934>)
 8002242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002246:	61d3      	str	r3, [r2, #28]
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_RCC_OscConfig+0x934>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002254:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002262:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCC_OscConfig+0x93c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11a      	bne.n	80022ac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_RCC_OscConfig+0x93c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a16      	ldr	r2, [pc, #88]	; (80022d4 <HAL_RCC_OscConfig+0x93c>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7fe fc63 	bl	8000b4c <HAL_GetTick>
 8002286:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	e009      	b.n	80022a0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228c:	f7fe fc5e 	bl	8000b4c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e3b1      	b.n	8002a04 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_RCC_OscConfig+0x93c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0ef      	beq.n	800228c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10d      	bne.n	80022d8 <HAL_RCC_OscConfig+0x940>
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_OscConfig+0x934>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a02      	ldr	r2, [pc, #8]	; (80022cc <HAL_RCC_OscConfig+0x934>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	e03c      	b.n	8002344 <HAL_RCC_OscConfig+0x9ac>
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	10908120 	.word	0x10908120
 80022d4:	40007000 	.word	0x40007000
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x96a>
 80022e8:	4bc1      	ldr	r3, [pc, #772]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4ac0      	ldr	r2, [pc, #768]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	6213      	str	r3, [r2, #32]
 80022f4:	4bbe      	ldr	r3, [pc, #760]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4abd      	ldr	r2, [pc, #756]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 80022fa:	f023 0304 	bic.w	r3, r3, #4
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	e020      	b.n	8002344 <HAL_RCC_OscConfig+0x9ac>
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x994>
 8002312:	4bb7      	ldr	r3, [pc, #732]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4ab6      	ldr	r2, [pc, #728]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6213      	str	r3, [r2, #32]
 800231e:	4bb4      	ldr	r3, [pc, #720]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4ab3      	ldr	r2, [pc, #716]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0x9ac>
 800232c:	4bb0      	ldr	r3, [pc, #704]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4aaf      	ldr	r2, [pc, #700]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	4bad      	ldr	r3, [pc, #692]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4aac      	ldr	r2, [pc, #688]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 800233e:	f023 0304 	bic.w	r3, r3, #4
 8002342:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8081 	beq.w	8002458 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7fe fbf9 	bl	8000b4c <HAL_GetTick>
 800235a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7fe fbf4 	bl	8000b4c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e345      	b.n	8002a04 <HAL_RCC_OscConfig+0x106c>
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002380:	2202      	movs	r2, #2
 8002382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023a4:	2202      	movs	r2, #2
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	fa93 f2a3 	rbit	r2, r3
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023be:	601a      	str	r2, [r3, #0]
  return result;
 80023c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d102      	bne.n	80023e4 <HAL_RCC_OscConfig+0xa4c>
 80023de:	4b84      	ldr	r3, [pc, #528]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	e013      	b.n	800240c <HAL_RCC_OscConfig+0xa74>
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	4b79      	ldr	r3, [pc, #484]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002410:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002414:	2102      	movs	r1, #2
 8002416:	6011      	str	r1, [r2, #0]
 8002418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800241c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	fa92 f1a2 	rbit	r1, r2
 8002426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800242a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800242e:	6011      	str	r1, [r2, #0]
  return result;
 8002430:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002434:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f002 021f 	and.w	r2, r2, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d084      	beq.n	8002360 <HAL_RCC_OscConfig+0x9c8>
 8002456:	e07f      	b.n	8002558 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7fe fb78 	bl	8000b4c <HAL_GetTick>
 800245c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fb73 	bl	8000b4c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e2c4      	b.n	8002a04 <HAL_RCC_OscConfig+0x106c>
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002482:	2202      	movs	r2, #2
 8002484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fa93 f2a3 	rbit	r2, r3
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024a6:	2202      	movs	r2, #2
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024c0:	601a      	str	r2, [r3, #0]
  return result;
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d102      	bne.n	80024e6 <HAL_RCC_OscConfig+0xb4e>
 80024e0:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	e013      	b.n	800250e <HAL_RCC_OscConfig+0xb76>
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024ee:	2202      	movs	r2, #2
 80024f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	fa93 f2a3 	rbit	r2, r3
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002512:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002516:	2102      	movs	r1, #2
 8002518:	6011      	str	r1, [r2, #0]
 800251a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800251e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	fa92 f1a2 	rbit	r1, r2
 8002528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800252c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002530:	6011      	str	r1, [r2, #0]
  return result;
 8002532:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002536:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f002 021f 	and.w	r2, r2, #31
 800254c:	2101      	movs	r1, #1
 800254e:	fa01 f202 	lsl.w	r2, r1, r2
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d184      	bne.n	8002462 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002558:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 8002566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8242 	beq.w	8002a02 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_RCC_OscConfig+0xc58>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b08      	cmp	r3, #8
 8002588:	f000 8213 	beq.w	80029b2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b02      	cmp	r3, #2
 800259a:	f040 8162 	bne.w	8002862 <HAL_RCC_OscConfig+0xeca>
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	fa93 f2a3 	rbit	r2, r3
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025c2:	601a      	str	r2, [r3, #0]
  return result;
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	461a      	mov	r2, r3
 80025e0:	2300      	movs	r3, #0
 80025e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fab2 	bl	8000b4c <HAL_GetTick>
 80025e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ec:	e00c      	b.n	8002608 <HAL_RCC_OscConfig+0xc70>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe faaa 	bl	8000b4c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e1fd      	b.n	8002a04 <HAL_RCC_OscConfig+0x106c>
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	fa93 f2a3 	rbit	r2, r3
 8002624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002628:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800262c:	601a      	str	r2, [r3, #0]
  return result;
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002636:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d102      	bne.n	8002652 <HAL_RCC_OscConfig+0xcba>
 800264c:	4bb0      	ldr	r3, [pc, #704]	; (8002910 <HAL_RCC_OscConfig+0xf78>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	e027      	b.n	80026a2 <HAL_RCC_OscConfig+0xd0a>
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800265a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	fa93 f2a3 	rbit	r2, r3
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f2a3 	rbit	r2, r3
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	4b9c      	ldr	r3, [pc, #624]	; (8002910 <HAL_RCC_OscConfig+0xf78>)
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026ae:	6011      	str	r1, [r2, #0]
 80026b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	fa92 f1a2 	rbit	r1, r2
 80026be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026c6:	6011      	str	r1, [r2, #0]
  return result;
 80026c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	fab2 f282 	clz	r2, r2
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	f042 0220 	orr.w	r2, r2, #32
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f002 021f 	and.w	r2, r2, #31
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f202 	lsl.w	r2, r1, r2
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d182      	bne.n	80025f4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ee:	4b88      	ldr	r3, [pc, #544]	; (8002910 <HAL_RCC_OscConfig+0xf78>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	430b      	orrs	r3, r1
 8002710:	497f      	ldr	r1, [pc, #508]	; (8002910 <HAL_RCC_OscConfig+0xf78>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800271e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	fa93 f2a3 	rbit	r2, r3
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800273a:	601a      	str	r2, [r3, #0]
  return result;
 800273c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002740:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002744:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002750:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	461a      	mov	r2, r3
 8002758:	2301      	movs	r3, #1
 800275a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe f9f6 	bl	8000b4c <HAL_GetTick>
 8002760:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002764:	e009      	b.n	800277a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002766:	f7fe f9f1 	bl	8000b4c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e144      	b.n	8002a04 <HAL_RCC_OscConfig+0x106c>
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800279e:	601a      	str	r2, [r3, #0]
  return result;
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80027a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d102      	bne.n	80027c4 <HAL_RCC_OscConfig+0xe2c>
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <HAL_RCC_OscConfig+0xf78>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	e027      	b.n	8002814 <HAL_RCC_OscConfig+0xe7c>
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fa93 f2a3 	rbit	r2, r3
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f2a3 	rbit	r2, r3
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <HAL_RCC_OscConfig+0xf78>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002818:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800281c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002820:	6011      	str	r1, [r2, #0]
 8002822:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002826:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	fa92 f1a2 	rbit	r1, r2
 8002830:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002834:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002838:	6011      	str	r1, [r2, #0]
  return result;
 800283a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800283e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	fab2 f282 	clz	r2, r2
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	f042 0220 	orr.w	r2, r2, #32
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f002 021f 	and.w	r2, r2, #31
 8002854:	2101      	movs	r1, #1
 8002856:	fa01 f202 	lsl.w	r2, r1, r2
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d082      	beq.n	8002766 <HAL_RCC_OscConfig+0xdce>
 8002860:	e0cf      	b.n	8002a02 <HAL_RCC_OscConfig+0x106a>
 8002862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002866:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800286a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800286e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002886:	601a      	str	r2, [r3, #0]
  return result;
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002890:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800289c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	461a      	mov	r2, r3
 80028a4:	2300      	movs	r3, #0
 80028a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe f950 	bl	8000b4c <HAL_GetTick>
 80028ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b0:	e009      	b.n	80028c6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe f94b 	bl	8000b4c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e09e      	b.n	8002a04 <HAL_RCC_OscConfig+0x106c>
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fa93 f2a3 	rbit	r2, r3
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028ea:	601a      	str	r2, [r3, #0]
  return result;
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d104      	bne.n	8002914 <HAL_RCC_OscConfig+0xf7c>
 800290a:	4b01      	ldr	r3, [pc, #4]	; (8002910 <HAL_RCC_OscConfig+0xf78>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	e029      	b.n	8002964 <HAL_RCC_OscConfig+0xfcc>
 8002910:	40021000 	.word	0x40021000
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800291c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	fa93 f2a3 	rbit	r2, r3
 8002956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_OscConfig+0x1078>)
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002968:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800296c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002970:	6011      	str	r1, [r2, #0]
 8002972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002976:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	fa92 f1a2 	rbit	r1, r2
 8002980:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002984:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002988:	6011      	str	r1, [r2, #0]
  return result;
 800298a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800298e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	fab2 f282 	clz	r2, r2
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f042 0220 	orr.w	r2, r2, #32
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f002 021f 	and.w	r2, r2, #31
 80029a4:	2101      	movs	r1, #1
 80029a6:	fa01 f202 	lsl.w	r2, r1, r2
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d180      	bne.n	80028b2 <HAL_RCC_OscConfig+0xf1a>
 80029b0:	e027      	b.n	8002a02 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e01e      	b.n	8002a04 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_OscConfig+0x1078>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d10b      	bne.n	80029fe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000

08002a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b09e      	sub	sp, #120	; 0x78
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e162      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b90      	ldr	r3, [pc, #576]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d910      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b8d      	ldr	r3, [pc, #564]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 0207 	bic.w	r2, r3, #7
 8002a42:	498b      	ldr	r1, [pc, #556]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b89      	ldr	r3, [pc, #548]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e14a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	497f      	ldr	r1, [pc, #508]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80dc 	beq.w	8002c40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d13c      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xf6>
 8002a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d102      	bne.n	8002aba <HAL_RCC_ClockConfig+0xa6>
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	e00f      	b.n	8002ada <HAL_RCC_ClockConfig+0xc6>
 8002aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002abe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002acc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad6:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ade:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ae0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ae2:	fa92 f2a2 	rbit	r2, r2
 8002ae6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002aea:	fab2 f282 	clz	r2, r2
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f042 0220 	orr.w	r2, r2, #32
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f002 021f 	and.w	r2, r2, #31
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f202 	lsl.w	r2, r1, r2
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d17b      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0f3      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d13c      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x178>
 8002b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d102      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x128>
 8002b36:	4b4f      	ldr	r3, [pc, #316]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	e00f      	b.n	8002b5c <HAL_RCC_ClockConfig+0x148>
 8002b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	647b      	str	r3, [r7, #68]	; 0x44
 8002b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b58:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b60:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b64:	fa92 f2a2 	rbit	r2, r2
 8002b68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b6c:	fab2 f282 	clz	r2, r2
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	f042 0220 	orr.w	r2, r2, #32
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f002 021f 	and.w	r2, r2, #31
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d13a      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b2      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d102      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x1a0>
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	e00d      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x1bc>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	61ba      	str	r2, [r7, #24]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	fa92 f2a2 	rbit	r2, r2
 8002bda:	617a      	str	r2, [r7, #20]
  return result;
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0220 	orr.w	r2, r2, #32
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e079      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f023 0203 	bic.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	491a      	ldr	r1, [pc, #104]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c10:	f7fd ff9c 	bl	8000b4c <HAL_GetTick>
 8002c14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c18:	f7fd ff98 	bl	8000b4c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e061      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 020c 	and.w	r2, r3, #12
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d1eb      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d214      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 0207 	bic.w	r2, r3, #7
 8002c56:	4906      	ldr	r1, [pc, #24]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5e:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e040      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCC_ClockConfig+0x2e8>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	491a      	ldr	r1, [pc, #104]	; (8002cfc <HAL_RCC_ClockConfig+0x2e8>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca2:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <HAL_RCC_ClockConfig+0x2e8>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4912      	ldr	r1, [pc, #72]	; (8002cfc <HAL_RCC_ClockConfig+0x2e8>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cb6:	f000 f829 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8002cba:	4601      	mov	r1, r0
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <HAL_RCC_ClockConfig+0x2e8>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	22f0      	movs	r2, #240	; 0xf0
 8002cc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	fa92 f2a2 	rbit	r2, r2
 8002cce:	60fa      	str	r2, [r7, #12]
  return result;
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	fab2 f282 	clz	r2, r2
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	40d3      	lsrs	r3, r2
 8002cda:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x2ec>)
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	fa21 f303 	lsr.w	r3, r1, r3
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <HAL_RCC_ClockConfig+0x2f0>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RCC_ClockConfig+0x2f4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd feea 	bl	8000ac4 <HAL_InitTick>
  
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3778      	adds	r7, #120	; 0x78
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08004500 	.word	0x08004500
 8002d04:	20000000 	.word	0x20000000
 8002d08:	20000004 	.word	0x20000004

08002d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b08b      	sub	sp, #44	; 0x2c
 8002d10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d26:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d002      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x30>
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d003      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x36>
 8002d3a:	e03c      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d3c:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d3e:	623b      	str	r3, [r7, #32]
      break;
 8002d40:	e03c      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	fa92 f2a2 	rbit	r2, r2
 8002d54:	607a      	str	r2, [r7, #4]
  return result;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	fab2 f282 	clz	r2, r2
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	40d3      	lsrs	r3, r2
 8002d60:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	220f      	movs	r2, #15
 8002d70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	fa92 f2a2 	rbit	r2, r2
 8002d78:	60fa      	str	r2, [r7, #12]
  return result;
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	fab2 f282 	clz	r2, r2
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	40d3      	lsrs	r3, r2
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d94:	4a0e      	ldr	r2, [pc, #56]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
 8002da4:	e004      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	623b      	str	r3, [r7, #32]
      break;
 8002db4:	e002      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002db8:	623b      	str	r3, [r7, #32]
      break;
 8002dba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	372c      	adds	r7, #44	; 0x2c
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	007a1200 	.word	0x007a1200
 8002dd4:	08004518 	.word	0x08004518
 8002dd8:	08004528 	.word	0x08004528
 8002ddc:	003d0900 	.word	0x003d0900

08002de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000000 	.word	0x20000000

08002df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002dfe:	f7ff ffef 	bl	8002de0 <HAL_RCC_GetHCLKFreq>
 8002e02:	4601      	mov	r1, r0
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	fa92 f2a2 	rbit	r2, r2
 8002e18:	603a      	str	r2, [r7, #0]
  return result;
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	fab2 f282 	clz	r2, r2
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	40d3      	lsrs	r3, r2
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08004510 	.word	0x08004510

08002e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e42:	f7ff ffcd 	bl	8002de0 <HAL_RCC_GetHCLKFreq>
 8002e46:	4601      	mov	r1, r0
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	fa92 f2a2 	rbit	r2, r2
 8002e5c:	603a      	str	r2, [r7, #0]
  return result;
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	fab2 f282 	clz	r2, r2
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	40d3      	lsrs	r3, r2
 8002e68:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	08004510 	.word	0x08004510

08002e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b092      	sub	sp, #72	; 0x48
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80d4 	beq.w	800304c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10e      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	4a4a      	ldr	r2, [pc, #296]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eba:	61d3      	str	r3, [r2, #28]
 8002ebc:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	4b45      	ldr	r3, [pc, #276]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d118      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eda:	4b42      	ldr	r3, [pc, #264]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a41      	ldr	r2, [pc, #260]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee6:	f7fd fe31 	bl	8000b4c <HAL_GetTick>
 8002eea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	e008      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eee:	f7fd fe2d 	bl	8000b4c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b64      	cmp	r3, #100	; 0x64
 8002efa:	d901      	bls.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e169      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f0c:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8084 	beq.w	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d07c      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	461a      	mov	r2, r3
 8002f56:	2301      	movs	r3, #1
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f7e:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d04b      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd fddd 	bl	8000b4c <HAL_GetTick>
 8002f92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fd fdd9 	bl	8000b4c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e113      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002fac:	2302      	movs	r3, #2
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb8:	2302      	movs	r3, #2
 8002fba:	623b      	str	r3, [r7, #32]
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	61fb      	str	r3, [r7, #28]
  return result;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f043 0302 	orr.w	r3, r3, #2
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d108      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002fda:	4b01      	ldr	r3, [pc, #4]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	e00d      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	10908100 	.word	0x10908100
 8002fec:	2302      	movs	r3, #2
 8002fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	4b78      	ldr	r3, [pc, #480]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	613a      	str	r2, [r7, #16]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	fa92 f2a2 	rbit	r2, r2
 8003006:	60fa      	str	r2, [r7, #12]
  return result;
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	fab2 f282 	clz	r2, r2
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f002 021f 	and.w	r2, r2, #31
 800301a:	2101      	movs	r1, #1
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0b7      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003026:	4b6d      	ldr	r3, [pc, #436]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	496a      	ldr	r1, [pc, #424]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003034:	4313      	orrs	r3, r2
 8003036:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003038:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4b66      	ldr	r3, [pc, #408]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4a65      	ldr	r2, [pc, #404]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003058:	4b60      	ldr	r3, [pc, #384]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	f023 0203 	bic.w	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	495d      	ldr	r1, [pc, #372]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003066:	4313      	orrs	r3, r2
 8003068:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003076:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	4956      	ldr	r1, [pc, #344]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003084:	4313      	orrs	r3, r2
 8003086:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003094:	4b51      	ldr	r3, [pc, #324]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	494e      	ldr	r1, [pc, #312]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b2:	4b4a      	ldr	r3, [pc, #296]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f023 0210 	bic.w	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4947      	ldr	r1, [pc, #284]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80030d0:	4b42      	ldr	r3, [pc, #264]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	493f      	ldr	r1, [pc, #252]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030ee:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f023 0220 	bic.w	r2, r3, #32
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4938      	ldr	r1, [pc, #224]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800310c:	4b33      	ldr	r3, [pc, #204]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	4930      	ldr	r1, [pc, #192]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800311a:	4313      	orrs	r3, r2
 800311c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800312a:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	4929      	ldr	r1, [pc, #164]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003138:	4313      	orrs	r3, r2
 800313a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003148:	4b24      	ldr	r3, [pc, #144]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	4921      	ldr	r1, [pc, #132]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	491a      	ldr	r1, [pc, #104]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003174:	4313      	orrs	r3, r2
 8003176:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	4912      	ldr	r1, [pc, #72]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003192:	4313      	orrs	r3, r2
 8003194:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	490b      	ldr	r1, [pc, #44]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031cc:	4903      	ldr	r1, [pc, #12]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3748      	adds	r7, #72	; 0x48
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000

080031e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e09d      	b.n	800332e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d108      	bne.n	800320c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003202:	d009      	beq.n	8003218 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]
 800320a:	e005      	b.n	8003218 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fd faca 	bl	80007cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003258:	d902      	bls.n	8003260 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	e002      	b.n	8003266 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003264:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800326e:	d007      	beq.n	8003280 <HAL_SPI_Init+0xa0>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003278:	d002      	beq.n	8003280 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	ea42 0103 	orr.w	r1, r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	0c1b      	lsrs	r3, r3, #16
 80032dc:	f003 0204 	and.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032fc:	ea42 0103 	orr.w	r1, r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	460b      	mov	r3, r1
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e059      	b.n	8003402 <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7fd fa76 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2224      	movs	r2, #36	; 0x24
 8003368:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f846 	bl	800340c <UART_SetConfig>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_MultiProcessor_Init+0x54>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e03b      	b.n	8003402 <HAL_MultiProcessor_Init+0xcc>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_MultiProcessor_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fa10 	bl	80037b8 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b6:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033be:	d10a      	bne.n	80033d6 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	061a      	lsls	r2, r3, #24
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fa7e 	bl	80038fc <UART_CheckIdleState>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800343a:	f023 030c 	bic.w	r3, r3, #12
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	6979      	ldr	r1, [r7, #20]
 8003444:	430b      	orrs	r3, r1
 8003446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	430a      	orrs	r2, r1
 8003480:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4aa8      	ldr	r2, [pc, #672]	; (8003728 <UART_SetConfig+0x31c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d120      	bne.n	80034ce <UART_SetConfig+0xc2>
 800348c:	4ba7      	ldr	r3, [pc, #668]	; (800372c <UART_SetConfig+0x320>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b03      	cmp	r3, #3
 8003496:	d817      	bhi.n	80034c8 <UART_SetConfig+0xbc>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <UART_SetConfig+0x94>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034bd 	.word	0x080034bd
 80034a8:	080034c3 	.word	0x080034c3
 80034ac:	080034b7 	.word	0x080034b7
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e0b5      	b.n	8003622 <UART_SetConfig+0x216>
 80034b6:	2302      	movs	r3, #2
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e0b2      	b.n	8003622 <UART_SetConfig+0x216>
 80034bc:	2304      	movs	r3, #4
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e0af      	b.n	8003622 <UART_SetConfig+0x216>
 80034c2:	2308      	movs	r3, #8
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e0ac      	b.n	8003622 <UART_SetConfig+0x216>
 80034c8:	2310      	movs	r3, #16
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e0a9      	b.n	8003622 <UART_SetConfig+0x216>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a97      	ldr	r2, [pc, #604]	; (8003730 <UART_SetConfig+0x324>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d124      	bne.n	8003522 <UART_SetConfig+0x116>
 80034d8:	4b94      	ldr	r3, [pc, #592]	; (800372c <UART_SetConfig+0x320>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034e4:	d011      	beq.n	800350a <UART_SetConfig+0xfe>
 80034e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034ea:	d817      	bhi.n	800351c <UART_SetConfig+0x110>
 80034ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034f0:	d011      	beq.n	8003516 <UART_SetConfig+0x10a>
 80034f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034f6:	d811      	bhi.n	800351c <UART_SetConfig+0x110>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <UART_SetConfig+0xf8>
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d006      	beq.n	8003510 <UART_SetConfig+0x104>
 8003502:	e00b      	b.n	800351c <UART_SetConfig+0x110>
 8003504:	2300      	movs	r3, #0
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e08b      	b.n	8003622 <UART_SetConfig+0x216>
 800350a:	2302      	movs	r3, #2
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e088      	b.n	8003622 <UART_SetConfig+0x216>
 8003510:	2304      	movs	r3, #4
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e085      	b.n	8003622 <UART_SetConfig+0x216>
 8003516:	2308      	movs	r3, #8
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e082      	b.n	8003622 <UART_SetConfig+0x216>
 800351c:	2310      	movs	r3, #16
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e07f      	b.n	8003622 <UART_SetConfig+0x216>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a83      	ldr	r2, [pc, #524]	; (8003734 <UART_SetConfig+0x328>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d124      	bne.n	8003576 <UART_SetConfig+0x16a>
 800352c:	4b7f      	ldr	r3, [pc, #508]	; (800372c <UART_SetConfig+0x320>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003534:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003538:	d011      	beq.n	800355e <UART_SetConfig+0x152>
 800353a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800353e:	d817      	bhi.n	8003570 <UART_SetConfig+0x164>
 8003540:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003544:	d011      	beq.n	800356a <UART_SetConfig+0x15e>
 8003546:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800354a:	d811      	bhi.n	8003570 <UART_SetConfig+0x164>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <UART_SetConfig+0x14c>
 8003550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003554:	d006      	beq.n	8003564 <UART_SetConfig+0x158>
 8003556:	e00b      	b.n	8003570 <UART_SetConfig+0x164>
 8003558:	2300      	movs	r3, #0
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e061      	b.n	8003622 <UART_SetConfig+0x216>
 800355e:	2302      	movs	r3, #2
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e05e      	b.n	8003622 <UART_SetConfig+0x216>
 8003564:	2304      	movs	r3, #4
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e05b      	b.n	8003622 <UART_SetConfig+0x216>
 800356a:	2308      	movs	r3, #8
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e058      	b.n	8003622 <UART_SetConfig+0x216>
 8003570:	2310      	movs	r3, #16
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e055      	b.n	8003622 <UART_SetConfig+0x216>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6f      	ldr	r2, [pc, #444]	; (8003738 <UART_SetConfig+0x32c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d124      	bne.n	80035ca <UART_SetConfig+0x1be>
 8003580:	4b6a      	ldr	r3, [pc, #424]	; (800372c <UART_SetConfig+0x320>)
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003588:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800358c:	d011      	beq.n	80035b2 <UART_SetConfig+0x1a6>
 800358e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003592:	d817      	bhi.n	80035c4 <UART_SetConfig+0x1b8>
 8003594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003598:	d011      	beq.n	80035be <UART_SetConfig+0x1b2>
 800359a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800359e:	d811      	bhi.n	80035c4 <UART_SetConfig+0x1b8>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <UART_SetConfig+0x1a0>
 80035a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035a8:	d006      	beq.n	80035b8 <UART_SetConfig+0x1ac>
 80035aa:	e00b      	b.n	80035c4 <UART_SetConfig+0x1b8>
 80035ac:	2300      	movs	r3, #0
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e037      	b.n	8003622 <UART_SetConfig+0x216>
 80035b2:	2302      	movs	r3, #2
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e034      	b.n	8003622 <UART_SetConfig+0x216>
 80035b8:	2304      	movs	r3, #4
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e031      	b.n	8003622 <UART_SetConfig+0x216>
 80035be:	2308      	movs	r3, #8
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e02e      	b.n	8003622 <UART_SetConfig+0x216>
 80035c4:	2310      	movs	r3, #16
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e02b      	b.n	8003622 <UART_SetConfig+0x216>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a5b      	ldr	r2, [pc, #364]	; (800373c <UART_SetConfig+0x330>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d124      	bne.n	800361e <UART_SetConfig+0x212>
 80035d4:	4b55      	ldr	r3, [pc, #340]	; (800372c <UART_SetConfig+0x320>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80035dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035e0:	d011      	beq.n	8003606 <UART_SetConfig+0x1fa>
 80035e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035e6:	d817      	bhi.n	8003618 <UART_SetConfig+0x20c>
 80035e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ec:	d011      	beq.n	8003612 <UART_SetConfig+0x206>
 80035ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f2:	d811      	bhi.n	8003618 <UART_SetConfig+0x20c>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <UART_SetConfig+0x1f4>
 80035f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035fc:	d006      	beq.n	800360c <UART_SetConfig+0x200>
 80035fe:	e00b      	b.n	8003618 <UART_SetConfig+0x20c>
 8003600:	2300      	movs	r3, #0
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e00d      	b.n	8003622 <UART_SetConfig+0x216>
 8003606:	2302      	movs	r3, #2
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e00a      	b.n	8003622 <UART_SetConfig+0x216>
 800360c:	2304      	movs	r3, #4
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e007      	b.n	8003622 <UART_SetConfig+0x216>
 8003612:	2308      	movs	r3, #8
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e004      	b.n	8003622 <UART_SetConfig+0x216>
 8003618:	2310      	movs	r3, #16
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e001      	b.n	8003622 <UART_SetConfig+0x216>
 800361e:	2310      	movs	r3, #16
 8003620:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362a:	d15c      	bne.n	80036e6 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800362c:	7ffb      	ldrb	r3, [r7, #31]
 800362e:	2b08      	cmp	r3, #8
 8003630:	d827      	bhi.n	8003682 <UART_SetConfig+0x276>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <UART_SetConfig+0x22c>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	0800365d 	.word	0x0800365d
 800363c:	08003665 	.word	0x08003665
 8003640:	0800366d 	.word	0x0800366d
 8003644:	08003683 	.word	0x08003683
 8003648:	08003673 	.word	0x08003673
 800364c:	08003683 	.word	0x08003683
 8003650:	08003683 	.word	0x08003683
 8003654:	08003683 	.word	0x08003683
 8003658:	0800367b 	.word	0x0800367b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800365c:	f7ff fbcc 	bl	8002df8 <HAL_RCC_GetPCLK1Freq>
 8003660:	61b8      	str	r0, [r7, #24]
        break;
 8003662:	e013      	b.n	800368c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003664:	f7ff fbea 	bl	8002e3c <HAL_RCC_GetPCLK2Freq>
 8003668:	61b8      	str	r0, [r7, #24]
        break;
 800366a:	e00f      	b.n	800368c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800366c:	4b34      	ldr	r3, [pc, #208]	; (8003740 <UART_SetConfig+0x334>)
 800366e:	61bb      	str	r3, [r7, #24]
        break;
 8003670:	e00c      	b.n	800368c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003672:	f7ff fb4b 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8003676:	61b8      	str	r0, [r7, #24]
        break;
 8003678:	e008      	b.n	800368c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367e:	61bb      	str	r3, [r7, #24]
        break;
 8003680:	e004      	b.n	800368c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	77bb      	strb	r3, [r7, #30]
        break;
 800368a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8084 	beq.w	800379c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	005a      	lsls	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	441a      	add	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b0f      	cmp	r3, #15
 80036b0:	d916      	bls.n	80036e0 <UART_SetConfig+0x2d4>
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d212      	bcs.n	80036e0 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f023 030f 	bic.w	r3, r3, #15
 80036c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	89fb      	ldrh	r3, [r7, #14]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	89fa      	ldrh	r2, [r7, #14]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	e05d      	b.n	800379c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	77bb      	strb	r3, [r7, #30]
 80036e4:	e05a      	b.n	800379c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036e6:	7ffb      	ldrb	r3, [r7, #31]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d836      	bhi.n	800375a <UART_SetConfig+0x34e>
 80036ec:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <UART_SetConfig+0x2e8>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003719 	.word	0x08003719
 80036f8:	08003721 	.word	0x08003721
 80036fc:	08003745 	.word	0x08003745
 8003700:	0800375b 	.word	0x0800375b
 8003704:	0800374b 	.word	0x0800374b
 8003708:	0800375b 	.word	0x0800375b
 800370c:	0800375b 	.word	0x0800375b
 8003710:	0800375b 	.word	0x0800375b
 8003714:	08003753 	.word	0x08003753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003718:	f7ff fb6e 	bl	8002df8 <HAL_RCC_GetPCLK1Freq>
 800371c:	61b8      	str	r0, [r7, #24]
        break;
 800371e:	e021      	b.n	8003764 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003720:	f7ff fb8c 	bl	8002e3c <HAL_RCC_GetPCLK2Freq>
 8003724:	61b8      	str	r0, [r7, #24]
        break;
 8003726:	e01d      	b.n	8003764 <UART_SetConfig+0x358>
 8003728:	40013800 	.word	0x40013800
 800372c:	40021000 	.word	0x40021000
 8003730:	40004400 	.word	0x40004400
 8003734:	40004800 	.word	0x40004800
 8003738:	40004c00 	.word	0x40004c00
 800373c:	40005000 	.word	0x40005000
 8003740:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <UART_SetConfig+0x3a8>)
 8003746:	61bb      	str	r3, [r7, #24]
        break;
 8003748:	e00c      	b.n	8003764 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800374a:	f7ff fadf 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 800374e:	61b8      	str	r0, [r7, #24]
        break;
 8003750:	e008      	b.n	8003764 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003756:	61bb      	str	r3, [r7, #24]
        break;
 8003758:	e004      	b.n	8003764 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	77bb      	strb	r3, [r7, #30]
        break;
 8003762:	bf00      	nop
    }

    if (pclk != 0U)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d018      	beq.n	800379c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	085a      	lsrs	r2, r3, #1
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	441a      	add	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	b29b      	uxth	r3, r3
 800377e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b0f      	cmp	r3, #15
 8003784:	d908      	bls.n	8003798 <UART_SetConfig+0x38c>
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d204      	bcs.n	8003798 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	e001      	b.n	800379c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	007a1200 	.word	0x007a1200

080037b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01a      	beq.n	80038ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b6:	d10a      	bne.n	80038ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800390c:	f7fd f91e 	bl	8000b4c <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d10e      	bne.n	800393e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f82d 	bl	800398e <UART_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e023      	b.n	8003986 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d10e      	bne.n	800396a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f817 	bl	800398e <UART_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e00d      	b.n	8003986 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b09c      	sub	sp, #112	; 0x70
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399e:	e0a5      	b.n	8003aec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039a6:	f000 80a1 	beq.w	8003aec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fd f8cf 	bl	8000b4c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80039ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d13e      	bne.n	8003a3e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039d4:	667b      	str	r3, [r7, #100]	; 0x64
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e6      	bne.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3308      	adds	r3, #8
 80039f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	663b      	str	r3, [r7, #96]	; 0x60
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3308      	adds	r3, #8
 8003a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a12:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e5      	bne.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e067      	b.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d04f      	beq.n	8003aec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5a:	d147      	bne.n	8003aec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
 8003a86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e6      	bne.n	8003a66 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ab8:	623a      	str	r2, [r7, #32]
 8003aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	69f9      	ldr	r1, [r7, #28]
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e5      	bne.n	8003a98 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e010      	b.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4013      	ands	r3, r2
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	f43f af4a 	beq.w	80039a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3770      	adds	r7, #112	; 0x70
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b1e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b22:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	f107 0014 	add.w	r0, r7, #20
 8003b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	b004      	add	sp, #16
 8003b8c:	4770      	bx	lr
	...

08003b90 <__errno>:
 8003b90:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <__errno+0x8>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	2000000c 	.word	0x2000000c

08003b9c <__libc_init_array>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4d0d      	ldr	r5, [pc, #52]	; (8003bd4 <__libc_init_array+0x38>)
 8003ba0:	4c0d      	ldr	r4, [pc, #52]	; (8003bd8 <__libc_init_array+0x3c>)
 8003ba2:	1b64      	subs	r4, r4, r5
 8003ba4:	10a4      	asrs	r4, r4, #2
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	42a6      	cmp	r6, r4
 8003baa:	d109      	bne.n	8003bc0 <__libc_init_array+0x24>
 8003bac:	4d0b      	ldr	r5, [pc, #44]	; (8003bdc <__libc_init_array+0x40>)
 8003bae:	4c0c      	ldr	r4, [pc, #48]	; (8003be0 <__libc_init_array+0x44>)
 8003bb0:	f000 fc8e 	bl	80044d0 <_init>
 8003bb4:	1b64      	subs	r4, r4, r5
 8003bb6:	10a4      	asrs	r4, r4, #2
 8003bb8:	2600      	movs	r6, #0
 8003bba:	42a6      	cmp	r6, r4
 8003bbc:	d105      	bne.n	8003bca <__libc_init_array+0x2e>
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc4:	4798      	blx	r3
 8003bc6:	3601      	adds	r6, #1
 8003bc8:	e7ee      	b.n	8003ba8 <__libc_init_array+0xc>
 8003bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bce:	4798      	blx	r3
 8003bd0:	3601      	adds	r6, #1
 8003bd2:	e7f2      	b.n	8003bba <__libc_init_array+0x1e>
 8003bd4:	0800456c 	.word	0x0800456c
 8003bd8:	0800456c 	.word	0x0800456c
 8003bdc:	0800456c 	.word	0x0800456c
 8003be0:	08004570 	.word	0x08004570

08003be4 <memset>:
 8003be4:	4402      	add	r2, r0
 8003be6:	4603      	mov	r3, r0
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d100      	bne.n	8003bee <memset+0xa>
 8003bec:	4770      	bx	lr
 8003bee:	f803 1b01 	strb.w	r1, [r3], #1
 8003bf2:	e7f9      	b.n	8003be8 <memset+0x4>

08003bf4 <siprintf>:
 8003bf4:	b40e      	push	{r1, r2, r3}
 8003bf6:	b500      	push	{lr}
 8003bf8:	b09c      	sub	sp, #112	; 0x70
 8003bfa:	ab1d      	add	r3, sp, #116	; 0x74
 8003bfc:	9002      	str	r0, [sp, #8]
 8003bfe:	9006      	str	r0, [sp, #24]
 8003c00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c04:	4809      	ldr	r0, [pc, #36]	; (8003c2c <siprintf+0x38>)
 8003c06:	9107      	str	r1, [sp, #28]
 8003c08:	9104      	str	r1, [sp, #16]
 8003c0a:	4909      	ldr	r1, [pc, #36]	; (8003c30 <siprintf+0x3c>)
 8003c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c10:	9105      	str	r1, [sp, #20]
 8003c12:	6800      	ldr	r0, [r0, #0]
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	a902      	add	r1, sp, #8
 8003c18:	f000 f868 	bl	8003cec <_svfiprintf_r>
 8003c1c:	9b02      	ldr	r3, [sp, #8]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	b01c      	add	sp, #112	; 0x70
 8003c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c28:	b003      	add	sp, #12
 8003c2a:	4770      	bx	lr
 8003c2c:	2000000c 	.word	0x2000000c
 8003c30:	ffff0208 	.word	0xffff0208

08003c34 <__ssputs_r>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	688e      	ldr	r6, [r1, #8]
 8003c3a:	429e      	cmp	r6, r3
 8003c3c:	4682      	mov	sl, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	4690      	mov	r8, r2
 8003c42:	461f      	mov	r7, r3
 8003c44:	d838      	bhi.n	8003cb8 <__ssputs_r+0x84>
 8003c46:	898a      	ldrh	r2, [r1, #12]
 8003c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c4c:	d032      	beq.n	8003cb4 <__ssputs_r+0x80>
 8003c4e:	6825      	ldr	r5, [r4, #0]
 8003c50:	6909      	ldr	r1, [r1, #16]
 8003c52:	eba5 0901 	sub.w	r9, r5, r1
 8003c56:	6965      	ldr	r5, [r4, #20]
 8003c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c60:	3301      	adds	r3, #1
 8003c62:	444b      	add	r3, r9
 8003c64:	106d      	asrs	r5, r5, #1
 8003c66:	429d      	cmp	r5, r3
 8003c68:	bf38      	it	cc
 8003c6a:	461d      	movcc	r5, r3
 8003c6c:	0553      	lsls	r3, r2, #21
 8003c6e:	d531      	bpl.n	8003cd4 <__ssputs_r+0xa0>
 8003c70:	4629      	mov	r1, r5
 8003c72:	f000 fb63 	bl	800433c <_malloc_r>
 8003c76:	4606      	mov	r6, r0
 8003c78:	b950      	cbnz	r0, 8003c90 <__ssputs_r+0x5c>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	f8ca 3000 	str.w	r3, [sl]
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c86:	81a3      	strh	r3, [r4, #12]
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c90:	6921      	ldr	r1, [r4, #16]
 8003c92:	464a      	mov	r2, r9
 8003c94:	f000 fabe 	bl	8004214 <memcpy>
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca2:	81a3      	strh	r3, [r4, #12]
 8003ca4:	6126      	str	r6, [r4, #16]
 8003ca6:	6165      	str	r5, [r4, #20]
 8003ca8:	444e      	add	r6, r9
 8003caa:	eba5 0509 	sub.w	r5, r5, r9
 8003cae:	6026      	str	r6, [r4, #0]
 8003cb0:	60a5      	str	r5, [r4, #8]
 8003cb2:	463e      	mov	r6, r7
 8003cb4:	42be      	cmp	r6, r7
 8003cb6:	d900      	bls.n	8003cba <__ssputs_r+0x86>
 8003cb8:	463e      	mov	r6, r7
 8003cba:	6820      	ldr	r0, [r4, #0]
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	4641      	mov	r1, r8
 8003cc0:	f000 fab6 	bl	8004230 <memmove>
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	1b9b      	subs	r3, r3, r6
 8003cc8:	60a3      	str	r3, [r4, #8]
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	4433      	add	r3, r6
 8003cce:	6023      	str	r3, [r4, #0]
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	e7db      	b.n	8003c8c <__ssputs_r+0x58>
 8003cd4:	462a      	mov	r2, r5
 8003cd6:	f000 fba5 	bl	8004424 <_realloc_r>
 8003cda:	4606      	mov	r6, r0
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d1e1      	bne.n	8003ca4 <__ssputs_r+0x70>
 8003ce0:	6921      	ldr	r1, [r4, #16]
 8003ce2:	4650      	mov	r0, sl
 8003ce4:	f000 fabe 	bl	8004264 <_free_r>
 8003ce8:	e7c7      	b.n	8003c7a <__ssputs_r+0x46>
	...

08003cec <_svfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4698      	mov	r8, r3
 8003cf2:	898b      	ldrh	r3, [r1, #12]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	b09d      	sub	sp, #116	; 0x74
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	460d      	mov	r5, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	d50e      	bpl.n	8003d1e <_svfiprintf_r+0x32>
 8003d00:	690b      	ldr	r3, [r1, #16]
 8003d02:	b963      	cbnz	r3, 8003d1e <_svfiprintf_r+0x32>
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	f000 fb19 	bl	800433c <_malloc_r>
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	6128      	str	r0, [r5, #16]
 8003d0e:	b920      	cbnz	r0, 8003d1a <_svfiprintf_r+0x2e>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d18:	e0d1      	b.n	8003ebe <_svfiprintf_r+0x1d2>
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	616b      	str	r3, [r5, #20]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
 8003d22:	2320      	movs	r3, #32
 8003d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d2c:	2330      	movs	r3, #48	; 0x30
 8003d2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ed8 <_svfiprintf_r+0x1ec>
 8003d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d36:	f04f 0901 	mov.w	r9, #1
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	469a      	mov	sl, r3
 8003d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d42:	b10a      	cbz	r2, 8003d48 <_svfiprintf_r+0x5c>
 8003d44:	2a25      	cmp	r2, #37	; 0x25
 8003d46:	d1f9      	bne.n	8003d3c <_svfiprintf_r+0x50>
 8003d48:	ebba 0b04 	subs.w	fp, sl, r4
 8003d4c:	d00b      	beq.n	8003d66 <_svfiprintf_r+0x7a>
 8003d4e:	465b      	mov	r3, fp
 8003d50:	4622      	mov	r2, r4
 8003d52:	4629      	mov	r1, r5
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff ff6d 	bl	8003c34 <__ssputs_r>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	f000 80aa 	beq.w	8003eb4 <_svfiprintf_r+0x1c8>
 8003d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d62:	445a      	add	r2, fp
 8003d64:	9209      	str	r2, [sp, #36]	; 0x24
 8003d66:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a2 	beq.w	8003eb4 <_svfiprintf_r+0x1c8>
 8003d70:	2300      	movs	r3, #0
 8003d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7a:	f10a 0a01 	add.w	sl, sl, #1
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	9307      	str	r3, [sp, #28]
 8003d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d86:	931a      	str	r3, [sp, #104]	; 0x68
 8003d88:	4654      	mov	r4, sl
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d90:	4851      	ldr	r0, [pc, #324]	; (8003ed8 <_svfiprintf_r+0x1ec>)
 8003d92:	f7fc fa25 	bl	80001e0 <memchr>
 8003d96:	9a04      	ldr	r2, [sp, #16]
 8003d98:	b9d8      	cbnz	r0, 8003dd2 <_svfiprintf_r+0xe6>
 8003d9a:	06d0      	lsls	r0, r2, #27
 8003d9c:	bf44      	itt	mi
 8003d9e:	2320      	movmi	r3, #32
 8003da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da4:	0711      	lsls	r1, r2, #28
 8003da6:	bf44      	itt	mi
 8003da8:	232b      	movmi	r3, #43	; 0x2b
 8003daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dae:	f89a 3000 	ldrb.w	r3, [sl]
 8003db2:	2b2a      	cmp	r3, #42	; 0x2a
 8003db4:	d015      	beq.n	8003de2 <_svfiprintf_r+0xf6>
 8003db6:	9a07      	ldr	r2, [sp, #28]
 8003db8:	4654      	mov	r4, sl
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f04f 0c0a 	mov.w	ip, #10
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dc6:	3b30      	subs	r3, #48	; 0x30
 8003dc8:	2b09      	cmp	r3, #9
 8003dca:	d94e      	bls.n	8003e6a <_svfiprintf_r+0x17e>
 8003dcc:	b1b0      	cbz	r0, 8003dfc <_svfiprintf_r+0x110>
 8003dce:	9207      	str	r2, [sp, #28]
 8003dd0:	e014      	b.n	8003dfc <_svfiprintf_r+0x110>
 8003dd2:	eba0 0308 	sub.w	r3, r0, r8
 8003dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	9304      	str	r3, [sp, #16]
 8003dde:	46a2      	mov	sl, r4
 8003de0:	e7d2      	b.n	8003d88 <_svfiprintf_r+0x9c>
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	1d19      	adds	r1, r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	9103      	str	r1, [sp, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfbb      	ittet	lt
 8003dee:	425b      	neglt	r3, r3
 8003df0:	f042 0202 	orrlt.w	r2, r2, #2
 8003df4:	9307      	strge	r3, [sp, #28]
 8003df6:	9307      	strlt	r3, [sp, #28]
 8003df8:	bfb8      	it	lt
 8003dfa:	9204      	strlt	r2, [sp, #16]
 8003dfc:	7823      	ldrb	r3, [r4, #0]
 8003dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8003e00:	d10c      	bne.n	8003e1c <_svfiprintf_r+0x130>
 8003e02:	7863      	ldrb	r3, [r4, #1]
 8003e04:	2b2a      	cmp	r3, #42	; 0x2a
 8003e06:	d135      	bne.n	8003e74 <_svfiprintf_r+0x188>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	1d1a      	adds	r2, r3, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	9203      	str	r2, [sp, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bfb8      	it	lt
 8003e14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e18:	3402      	adds	r4, #2
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ee8 <_svfiprintf_r+0x1fc>
 8003e20:	7821      	ldrb	r1, [r4, #0]
 8003e22:	2203      	movs	r2, #3
 8003e24:	4650      	mov	r0, sl
 8003e26:	f7fc f9db 	bl	80001e0 <memchr>
 8003e2a:	b140      	cbz	r0, 8003e3e <_svfiprintf_r+0x152>
 8003e2c:	2340      	movs	r3, #64	; 0x40
 8003e2e:	eba0 000a 	sub.w	r0, r0, sl
 8003e32:	fa03 f000 	lsl.w	r0, r3, r0
 8003e36:	9b04      	ldr	r3, [sp, #16]
 8003e38:	4303      	orrs	r3, r0
 8003e3a:	3401      	adds	r4, #1
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e42:	4826      	ldr	r0, [pc, #152]	; (8003edc <_svfiprintf_r+0x1f0>)
 8003e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e48:	2206      	movs	r2, #6
 8003e4a:	f7fc f9c9 	bl	80001e0 <memchr>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d038      	beq.n	8003ec4 <_svfiprintf_r+0x1d8>
 8003e52:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <_svfiprintf_r+0x1f4>)
 8003e54:	bb1b      	cbnz	r3, 8003e9e <_svfiprintf_r+0x1b2>
 8003e56:	9b03      	ldr	r3, [sp, #12]
 8003e58:	3307      	adds	r3, #7
 8003e5a:	f023 0307 	bic.w	r3, r3, #7
 8003e5e:	3308      	adds	r3, #8
 8003e60:	9303      	str	r3, [sp, #12]
 8003e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e64:	4433      	add	r3, r6
 8003e66:	9309      	str	r3, [sp, #36]	; 0x24
 8003e68:	e767      	b.n	8003d3a <_svfiprintf_r+0x4e>
 8003e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e6e:	460c      	mov	r4, r1
 8003e70:	2001      	movs	r0, #1
 8003e72:	e7a5      	b.n	8003dc0 <_svfiprintf_r+0xd4>
 8003e74:	2300      	movs	r3, #0
 8003e76:	3401      	adds	r4, #1
 8003e78:	9305      	str	r3, [sp, #20]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f04f 0c0a 	mov.w	ip, #10
 8003e80:	4620      	mov	r0, r4
 8003e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e86:	3a30      	subs	r2, #48	; 0x30
 8003e88:	2a09      	cmp	r2, #9
 8003e8a:	d903      	bls.n	8003e94 <_svfiprintf_r+0x1a8>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0c5      	beq.n	8003e1c <_svfiprintf_r+0x130>
 8003e90:	9105      	str	r1, [sp, #20]
 8003e92:	e7c3      	b.n	8003e1c <_svfiprintf_r+0x130>
 8003e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e98:	4604      	mov	r4, r0
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e7f0      	b.n	8003e80 <_svfiprintf_r+0x194>
 8003e9e:	ab03      	add	r3, sp, #12
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	462a      	mov	r2, r5
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <_svfiprintf_r+0x1f8>)
 8003ea6:	a904      	add	r1, sp, #16
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f3af 8000 	nop.w
 8003eae:	1c42      	adds	r2, r0, #1
 8003eb0:	4606      	mov	r6, r0
 8003eb2:	d1d6      	bne.n	8003e62 <_svfiprintf_r+0x176>
 8003eb4:	89ab      	ldrh	r3, [r5, #12]
 8003eb6:	065b      	lsls	r3, r3, #25
 8003eb8:	f53f af2c 	bmi.w	8003d14 <_svfiprintf_r+0x28>
 8003ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ebe:	b01d      	add	sp, #116	; 0x74
 8003ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec4:	ab03      	add	r3, sp, #12
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	462a      	mov	r2, r5
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <_svfiprintf_r+0x1f8>)
 8003ecc:	a904      	add	r1, sp, #16
 8003ece:	4638      	mov	r0, r7
 8003ed0:	f000 f87a 	bl	8003fc8 <_printf_i>
 8003ed4:	e7eb      	b.n	8003eae <_svfiprintf_r+0x1c2>
 8003ed6:	bf00      	nop
 8003ed8:	08004538 	.word	0x08004538
 8003edc:	08004542 	.word	0x08004542
 8003ee0:	00000000 	.word	0x00000000
 8003ee4:	08003c35 	.word	0x08003c35
 8003ee8:	0800453e 	.word	0x0800453e

08003eec <_printf_common>:
 8003eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef0:	4616      	mov	r6, r2
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	688a      	ldr	r2, [r1, #8]
 8003ef6:	690b      	ldr	r3, [r1, #16]
 8003ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bfb8      	it	lt
 8003f00:	4613      	movlt	r3, r2
 8003f02:	6033      	str	r3, [r6, #0]
 8003f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f08:	4607      	mov	r7, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	b10a      	cbz	r2, 8003f12 <_printf_common+0x26>
 8003f0e:	3301      	adds	r3, #1
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	0699      	lsls	r1, r3, #26
 8003f16:	bf42      	ittt	mi
 8003f18:	6833      	ldrmi	r3, [r6, #0]
 8003f1a:	3302      	addmi	r3, #2
 8003f1c:	6033      	strmi	r3, [r6, #0]
 8003f1e:	6825      	ldr	r5, [r4, #0]
 8003f20:	f015 0506 	ands.w	r5, r5, #6
 8003f24:	d106      	bne.n	8003f34 <_printf_common+0x48>
 8003f26:	f104 0a19 	add.w	sl, r4, #25
 8003f2a:	68e3      	ldr	r3, [r4, #12]
 8003f2c:	6832      	ldr	r2, [r6, #0]
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	42ab      	cmp	r3, r5
 8003f32:	dc26      	bgt.n	8003f82 <_printf_common+0x96>
 8003f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f38:	1e13      	subs	r3, r2, #0
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	bf18      	it	ne
 8003f3e:	2301      	movne	r3, #1
 8003f40:	0692      	lsls	r2, r2, #26
 8003f42:	d42b      	bmi.n	8003f9c <_printf_common+0xb0>
 8003f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f48:	4649      	mov	r1, r9
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	47c0      	blx	r8
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d01e      	beq.n	8003f90 <_printf_common+0xa4>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	68e5      	ldr	r5, [r4, #12]
 8003f56:	6832      	ldr	r2, [r6, #0]
 8003f58:	f003 0306 	and.w	r3, r3, #6
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	bf08      	it	eq
 8003f60:	1aad      	subeq	r5, r5, r2
 8003f62:	68a3      	ldr	r3, [r4, #8]
 8003f64:	6922      	ldr	r2, [r4, #16]
 8003f66:	bf0c      	ite	eq
 8003f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f6c:	2500      	movne	r5, #0
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	bfc4      	itt	gt
 8003f72:	1a9b      	subgt	r3, r3, r2
 8003f74:	18ed      	addgt	r5, r5, r3
 8003f76:	2600      	movs	r6, #0
 8003f78:	341a      	adds	r4, #26
 8003f7a:	42b5      	cmp	r5, r6
 8003f7c:	d11a      	bne.n	8003fb4 <_printf_common+0xc8>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	e008      	b.n	8003f94 <_printf_common+0xa8>
 8003f82:	2301      	movs	r3, #1
 8003f84:	4652      	mov	r2, sl
 8003f86:	4649      	mov	r1, r9
 8003f88:	4638      	mov	r0, r7
 8003f8a:	47c0      	blx	r8
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d103      	bne.n	8003f98 <_printf_common+0xac>
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f98:	3501      	adds	r5, #1
 8003f9a:	e7c6      	b.n	8003f2a <_printf_common+0x3e>
 8003f9c:	18e1      	adds	r1, r4, r3
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	2030      	movs	r0, #48	; 0x30
 8003fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa6:	4422      	add	r2, r4
 8003fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	e7c7      	b.n	8003f44 <_printf_common+0x58>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	4649      	mov	r1, r9
 8003fba:	4638      	mov	r0, r7
 8003fbc:	47c0      	blx	r8
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d0e6      	beq.n	8003f90 <_printf_common+0xa4>
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7d9      	b.n	8003f7a <_printf_common+0x8e>
	...

08003fc8 <_printf_i>:
 8003fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fcc:	7e0f      	ldrb	r7, [r1, #24]
 8003fce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fd0:	2f78      	cmp	r7, #120	; 0x78
 8003fd2:	4691      	mov	r9, r2
 8003fd4:	4680      	mov	r8, r0
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	469a      	mov	sl, r3
 8003fda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fde:	d807      	bhi.n	8003ff0 <_printf_i+0x28>
 8003fe0:	2f62      	cmp	r7, #98	; 0x62
 8003fe2:	d80a      	bhi.n	8003ffa <_printf_i+0x32>
 8003fe4:	2f00      	cmp	r7, #0
 8003fe6:	f000 80d8 	beq.w	800419a <_printf_i+0x1d2>
 8003fea:	2f58      	cmp	r7, #88	; 0x58
 8003fec:	f000 80a3 	beq.w	8004136 <_printf_i+0x16e>
 8003ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff8:	e03a      	b.n	8004070 <_printf_i+0xa8>
 8003ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ffe:	2b15      	cmp	r3, #21
 8004000:	d8f6      	bhi.n	8003ff0 <_printf_i+0x28>
 8004002:	a101      	add	r1, pc, #4	; (adr r1, 8004008 <_printf_i+0x40>)
 8004004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004008:	08004061 	.word	0x08004061
 800400c:	08004075 	.word	0x08004075
 8004010:	08003ff1 	.word	0x08003ff1
 8004014:	08003ff1 	.word	0x08003ff1
 8004018:	08003ff1 	.word	0x08003ff1
 800401c:	08003ff1 	.word	0x08003ff1
 8004020:	08004075 	.word	0x08004075
 8004024:	08003ff1 	.word	0x08003ff1
 8004028:	08003ff1 	.word	0x08003ff1
 800402c:	08003ff1 	.word	0x08003ff1
 8004030:	08003ff1 	.word	0x08003ff1
 8004034:	08004181 	.word	0x08004181
 8004038:	080040a5 	.word	0x080040a5
 800403c:	08004163 	.word	0x08004163
 8004040:	08003ff1 	.word	0x08003ff1
 8004044:	08003ff1 	.word	0x08003ff1
 8004048:	080041a3 	.word	0x080041a3
 800404c:	08003ff1 	.word	0x08003ff1
 8004050:	080040a5 	.word	0x080040a5
 8004054:	08003ff1 	.word	0x08003ff1
 8004058:	08003ff1 	.word	0x08003ff1
 800405c:	0800416b 	.word	0x0800416b
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	1d1a      	adds	r2, r3, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	602a      	str	r2, [r5, #0]
 8004068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800406c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004070:	2301      	movs	r3, #1
 8004072:	e0a3      	b.n	80041bc <_printf_i+0x1f4>
 8004074:	6820      	ldr	r0, [r4, #0]
 8004076:	6829      	ldr	r1, [r5, #0]
 8004078:	0606      	lsls	r6, r0, #24
 800407a:	f101 0304 	add.w	r3, r1, #4
 800407e:	d50a      	bpl.n	8004096 <_printf_i+0xce>
 8004080:	680e      	ldr	r6, [r1, #0]
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	2e00      	cmp	r6, #0
 8004086:	da03      	bge.n	8004090 <_printf_i+0xc8>
 8004088:	232d      	movs	r3, #45	; 0x2d
 800408a:	4276      	negs	r6, r6
 800408c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004090:	485e      	ldr	r0, [pc, #376]	; (800420c <_printf_i+0x244>)
 8004092:	230a      	movs	r3, #10
 8004094:	e019      	b.n	80040ca <_printf_i+0x102>
 8004096:	680e      	ldr	r6, [r1, #0]
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800409e:	bf18      	it	ne
 80040a0:	b236      	sxthne	r6, r6
 80040a2:	e7ef      	b.n	8004084 <_printf_i+0xbc>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	1d19      	adds	r1, r3, #4
 80040aa:	6029      	str	r1, [r5, #0]
 80040ac:	0601      	lsls	r1, r0, #24
 80040ae:	d501      	bpl.n	80040b4 <_printf_i+0xec>
 80040b0:	681e      	ldr	r6, [r3, #0]
 80040b2:	e002      	b.n	80040ba <_printf_i+0xf2>
 80040b4:	0646      	lsls	r6, r0, #25
 80040b6:	d5fb      	bpl.n	80040b0 <_printf_i+0xe8>
 80040b8:	881e      	ldrh	r6, [r3, #0]
 80040ba:	4854      	ldr	r0, [pc, #336]	; (800420c <_printf_i+0x244>)
 80040bc:	2f6f      	cmp	r7, #111	; 0x6f
 80040be:	bf0c      	ite	eq
 80040c0:	2308      	moveq	r3, #8
 80040c2:	230a      	movne	r3, #10
 80040c4:	2100      	movs	r1, #0
 80040c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ca:	6865      	ldr	r5, [r4, #4]
 80040cc:	60a5      	str	r5, [r4, #8]
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	bfa2      	ittt	ge
 80040d2:	6821      	ldrge	r1, [r4, #0]
 80040d4:	f021 0104 	bicge.w	r1, r1, #4
 80040d8:	6021      	strge	r1, [r4, #0]
 80040da:	b90e      	cbnz	r6, 80040e0 <_printf_i+0x118>
 80040dc:	2d00      	cmp	r5, #0
 80040de:	d04d      	beq.n	800417c <_printf_i+0x1b4>
 80040e0:	4615      	mov	r5, r2
 80040e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80040e6:	fb03 6711 	mls	r7, r3, r1, r6
 80040ea:	5dc7      	ldrb	r7, [r0, r7]
 80040ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040f0:	4637      	mov	r7, r6
 80040f2:	42bb      	cmp	r3, r7
 80040f4:	460e      	mov	r6, r1
 80040f6:	d9f4      	bls.n	80040e2 <_printf_i+0x11a>
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d10b      	bne.n	8004114 <_printf_i+0x14c>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	07de      	lsls	r6, r3, #31
 8004100:	d508      	bpl.n	8004114 <_printf_i+0x14c>
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	6861      	ldr	r1, [r4, #4]
 8004106:	4299      	cmp	r1, r3
 8004108:	bfde      	ittt	le
 800410a:	2330      	movle	r3, #48	; 0x30
 800410c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004110:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004114:	1b52      	subs	r2, r2, r5
 8004116:	6122      	str	r2, [r4, #16]
 8004118:	f8cd a000 	str.w	sl, [sp]
 800411c:	464b      	mov	r3, r9
 800411e:	aa03      	add	r2, sp, #12
 8004120:	4621      	mov	r1, r4
 8004122:	4640      	mov	r0, r8
 8004124:	f7ff fee2 	bl	8003eec <_printf_common>
 8004128:	3001      	adds	r0, #1
 800412a:	d14c      	bne.n	80041c6 <_printf_i+0x1fe>
 800412c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004130:	b004      	add	sp, #16
 8004132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004136:	4835      	ldr	r0, [pc, #212]	; (800420c <_printf_i+0x244>)
 8004138:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800413c:	6829      	ldr	r1, [r5, #0]
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	f851 6b04 	ldr.w	r6, [r1], #4
 8004144:	6029      	str	r1, [r5, #0]
 8004146:	061d      	lsls	r5, r3, #24
 8004148:	d514      	bpl.n	8004174 <_printf_i+0x1ac>
 800414a:	07df      	lsls	r7, r3, #31
 800414c:	bf44      	itt	mi
 800414e:	f043 0320 	orrmi.w	r3, r3, #32
 8004152:	6023      	strmi	r3, [r4, #0]
 8004154:	b91e      	cbnz	r6, 800415e <_printf_i+0x196>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	f023 0320 	bic.w	r3, r3, #32
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	2310      	movs	r3, #16
 8004160:	e7b0      	b.n	80040c4 <_printf_i+0xfc>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	f043 0320 	orr.w	r3, r3, #32
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	2378      	movs	r3, #120	; 0x78
 800416c:	4828      	ldr	r0, [pc, #160]	; (8004210 <_printf_i+0x248>)
 800416e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004172:	e7e3      	b.n	800413c <_printf_i+0x174>
 8004174:	0659      	lsls	r1, r3, #25
 8004176:	bf48      	it	mi
 8004178:	b2b6      	uxthmi	r6, r6
 800417a:	e7e6      	b.n	800414a <_printf_i+0x182>
 800417c:	4615      	mov	r5, r2
 800417e:	e7bb      	b.n	80040f8 <_printf_i+0x130>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	6826      	ldr	r6, [r4, #0]
 8004184:	6961      	ldr	r1, [r4, #20]
 8004186:	1d18      	adds	r0, r3, #4
 8004188:	6028      	str	r0, [r5, #0]
 800418a:	0635      	lsls	r5, r6, #24
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	d501      	bpl.n	8004194 <_printf_i+0x1cc>
 8004190:	6019      	str	r1, [r3, #0]
 8004192:	e002      	b.n	800419a <_printf_i+0x1d2>
 8004194:	0670      	lsls	r0, r6, #25
 8004196:	d5fb      	bpl.n	8004190 <_printf_i+0x1c8>
 8004198:	8019      	strh	r1, [r3, #0]
 800419a:	2300      	movs	r3, #0
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	4615      	mov	r5, r2
 80041a0:	e7ba      	b.n	8004118 <_printf_i+0x150>
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	1d1a      	adds	r2, r3, #4
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	681d      	ldr	r5, [r3, #0]
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	2100      	movs	r1, #0
 80041ae:	4628      	mov	r0, r5
 80041b0:	f7fc f816 	bl	80001e0 <memchr>
 80041b4:	b108      	cbz	r0, 80041ba <_printf_i+0x1f2>
 80041b6:	1b40      	subs	r0, r0, r5
 80041b8:	6060      	str	r0, [r4, #4]
 80041ba:	6863      	ldr	r3, [r4, #4]
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	2300      	movs	r3, #0
 80041c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c4:	e7a8      	b.n	8004118 <_printf_i+0x150>
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	462a      	mov	r2, r5
 80041ca:	4649      	mov	r1, r9
 80041cc:	4640      	mov	r0, r8
 80041ce:	47d0      	blx	sl
 80041d0:	3001      	adds	r0, #1
 80041d2:	d0ab      	beq.n	800412c <_printf_i+0x164>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	079b      	lsls	r3, r3, #30
 80041d8:	d413      	bmi.n	8004202 <_printf_i+0x23a>
 80041da:	68e0      	ldr	r0, [r4, #12]
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	4298      	cmp	r0, r3
 80041e0:	bfb8      	it	lt
 80041e2:	4618      	movlt	r0, r3
 80041e4:	e7a4      	b.n	8004130 <_printf_i+0x168>
 80041e6:	2301      	movs	r3, #1
 80041e8:	4632      	mov	r2, r6
 80041ea:	4649      	mov	r1, r9
 80041ec:	4640      	mov	r0, r8
 80041ee:	47d0      	blx	sl
 80041f0:	3001      	adds	r0, #1
 80041f2:	d09b      	beq.n	800412c <_printf_i+0x164>
 80041f4:	3501      	adds	r5, #1
 80041f6:	68e3      	ldr	r3, [r4, #12]
 80041f8:	9903      	ldr	r1, [sp, #12]
 80041fa:	1a5b      	subs	r3, r3, r1
 80041fc:	42ab      	cmp	r3, r5
 80041fe:	dcf2      	bgt.n	80041e6 <_printf_i+0x21e>
 8004200:	e7eb      	b.n	80041da <_printf_i+0x212>
 8004202:	2500      	movs	r5, #0
 8004204:	f104 0619 	add.w	r6, r4, #25
 8004208:	e7f5      	b.n	80041f6 <_printf_i+0x22e>
 800420a:	bf00      	nop
 800420c:	08004549 	.word	0x08004549
 8004210:	0800455a 	.word	0x0800455a

08004214 <memcpy>:
 8004214:	440a      	add	r2, r1
 8004216:	4291      	cmp	r1, r2
 8004218:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800421c:	d100      	bne.n	8004220 <memcpy+0xc>
 800421e:	4770      	bx	lr
 8004220:	b510      	push	{r4, lr}
 8004222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800422a:	4291      	cmp	r1, r2
 800422c:	d1f9      	bne.n	8004222 <memcpy+0xe>
 800422e:	bd10      	pop	{r4, pc}

08004230 <memmove>:
 8004230:	4288      	cmp	r0, r1
 8004232:	b510      	push	{r4, lr}
 8004234:	eb01 0402 	add.w	r4, r1, r2
 8004238:	d902      	bls.n	8004240 <memmove+0x10>
 800423a:	4284      	cmp	r4, r0
 800423c:	4623      	mov	r3, r4
 800423e:	d807      	bhi.n	8004250 <memmove+0x20>
 8004240:	1e43      	subs	r3, r0, #1
 8004242:	42a1      	cmp	r1, r4
 8004244:	d008      	beq.n	8004258 <memmove+0x28>
 8004246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800424a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800424e:	e7f8      	b.n	8004242 <memmove+0x12>
 8004250:	4402      	add	r2, r0
 8004252:	4601      	mov	r1, r0
 8004254:	428a      	cmp	r2, r1
 8004256:	d100      	bne.n	800425a <memmove+0x2a>
 8004258:	bd10      	pop	{r4, pc}
 800425a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800425e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004262:	e7f7      	b.n	8004254 <memmove+0x24>

08004264 <_free_r>:
 8004264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004266:	2900      	cmp	r1, #0
 8004268:	d044      	beq.n	80042f4 <_free_r+0x90>
 800426a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800426e:	9001      	str	r0, [sp, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f1a1 0404 	sub.w	r4, r1, #4
 8004276:	bfb8      	it	lt
 8004278:	18e4      	addlt	r4, r4, r3
 800427a:	f000 f913 	bl	80044a4 <__malloc_lock>
 800427e:	4a1e      	ldr	r2, [pc, #120]	; (80042f8 <_free_r+0x94>)
 8004280:	9801      	ldr	r0, [sp, #4]
 8004282:	6813      	ldr	r3, [r2, #0]
 8004284:	b933      	cbnz	r3, 8004294 <_free_r+0x30>
 8004286:	6063      	str	r3, [r4, #4]
 8004288:	6014      	str	r4, [r2, #0]
 800428a:	b003      	add	sp, #12
 800428c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004290:	f000 b90e 	b.w	80044b0 <__malloc_unlock>
 8004294:	42a3      	cmp	r3, r4
 8004296:	d908      	bls.n	80042aa <_free_r+0x46>
 8004298:	6825      	ldr	r5, [r4, #0]
 800429a:	1961      	adds	r1, r4, r5
 800429c:	428b      	cmp	r3, r1
 800429e:	bf01      	itttt	eq
 80042a0:	6819      	ldreq	r1, [r3, #0]
 80042a2:	685b      	ldreq	r3, [r3, #4]
 80042a4:	1949      	addeq	r1, r1, r5
 80042a6:	6021      	streq	r1, [r4, #0]
 80042a8:	e7ed      	b.n	8004286 <_free_r+0x22>
 80042aa:	461a      	mov	r2, r3
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b10b      	cbz	r3, 80042b4 <_free_r+0x50>
 80042b0:	42a3      	cmp	r3, r4
 80042b2:	d9fa      	bls.n	80042aa <_free_r+0x46>
 80042b4:	6811      	ldr	r1, [r2, #0]
 80042b6:	1855      	adds	r5, r2, r1
 80042b8:	42a5      	cmp	r5, r4
 80042ba:	d10b      	bne.n	80042d4 <_free_r+0x70>
 80042bc:	6824      	ldr	r4, [r4, #0]
 80042be:	4421      	add	r1, r4
 80042c0:	1854      	adds	r4, r2, r1
 80042c2:	42a3      	cmp	r3, r4
 80042c4:	6011      	str	r1, [r2, #0]
 80042c6:	d1e0      	bne.n	800428a <_free_r+0x26>
 80042c8:	681c      	ldr	r4, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	6053      	str	r3, [r2, #4]
 80042ce:	4421      	add	r1, r4
 80042d0:	6011      	str	r1, [r2, #0]
 80042d2:	e7da      	b.n	800428a <_free_r+0x26>
 80042d4:	d902      	bls.n	80042dc <_free_r+0x78>
 80042d6:	230c      	movs	r3, #12
 80042d8:	6003      	str	r3, [r0, #0]
 80042da:	e7d6      	b.n	800428a <_free_r+0x26>
 80042dc:	6825      	ldr	r5, [r4, #0]
 80042de:	1961      	adds	r1, r4, r5
 80042e0:	428b      	cmp	r3, r1
 80042e2:	bf04      	itt	eq
 80042e4:	6819      	ldreq	r1, [r3, #0]
 80042e6:	685b      	ldreq	r3, [r3, #4]
 80042e8:	6063      	str	r3, [r4, #4]
 80042ea:	bf04      	itt	eq
 80042ec:	1949      	addeq	r1, r1, r5
 80042ee:	6021      	streq	r1, [r4, #0]
 80042f0:	6054      	str	r4, [r2, #4]
 80042f2:	e7ca      	b.n	800428a <_free_r+0x26>
 80042f4:	b003      	add	sp, #12
 80042f6:	bd30      	pop	{r4, r5, pc}
 80042f8:	200004b4 	.word	0x200004b4

080042fc <sbrk_aligned>:
 80042fc:	b570      	push	{r4, r5, r6, lr}
 80042fe:	4e0e      	ldr	r6, [pc, #56]	; (8004338 <sbrk_aligned+0x3c>)
 8004300:	460c      	mov	r4, r1
 8004302:	6831      	ldr	r1, [r6, #0]
 8004304:	4605      	mov	r5, r0
 8004306:	b911      	cbnz	r1, 800430e <sbrk_aligned+0x12>
 8004308:	f000 f8bc 	bl	8004484 <_sbrk_r>
 800430c:	6030      	str	r0, [r6, #0]
 800430e:	4621      	mov	r1, r4
 8004310:	4628      	mov	r0, r5
 8004312:	f000 f8b7 	bl	8004484 <_sbrk_r>
 8004316:	1c43      	adds	r3, r0, #1
 8004318:	d00a      	beq.n	8004330 <sbrk_aligned+0x34>
 800431a:	1cc4      	adds	r4, r0, #3
 800431c:	f024 0403 	bic.w	r4, r4, #3
 8004320:	42a0      	cmp	r0, r4
 8004322:	d007      	beq.n	8004334 <sbrk_aligned+0x38>
 8004324:	1a21      	subs	r1, r4, r0
 8004326:	4628      	mov	r0, r5
 8004328:	f000 f8ac 	bl	8004484 <_sbrk_r>
 800432c:	3001      	adds	r0, #1
 800432e:	d101      	bne.n	8004334 <sbrk_aligned+0x38>
 8004330:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004334:	4620      	mov	r0, r4
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	200004b8 	.word	0x200004b8

0800433c <_malloc_r>:
 800433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004340:	1ccd      	adds	r5, r1, #3
 8004342:	f025 0503 	bic.w	r5, r5, #3
 8004346:	3508      	adds	r5, #8
 8004348:	2d0c      	cmp	r5, #12
 800434a:	bf38      	it	cc
 800434c:	250c      	movcc	r5, #12
 800434e:	2d00      	cmp	r5, #0
 8004350:	4607      	mov	r7, r0
 8004352:	db01      	blt.n	8004358 <_malloc_r+0x1c>
 8004354:	42a9      	cmp	r1, r5
 8004356:	d905      	bls.n	8004364 <_malloc_r+0x28>
 8004358:	230c      	movs	r3, #12
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	2600      	movs	r6, #0
 800435e:	4630      	mov	r0, r6
 8004360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004364:	4e2e      	ldr	r6, [pc, #184]	; (8004420 <_malloc_r+0xe4>)
 8004366:	f000 f89d 	bl	80044a4 <__malloc_lock>
 800436a:	6833      	ldr	r3, [r6, #0]
 800436c:	461c      	mov	r4, r3
 800436e:	bb34      	cbnz	r4, 80043be <_malloc_r+0x82>
 8004370:	4629      	mov	r1, r5
 8004372:	4638      	mov	r0, r7
 8004374:	f7ff ffc2 	bl	80042fc <sbrk_aligned>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	4604      	mov	r4, r0
 800437c:	d14d      	bne.n	800441a <_malloc_r+0xde>
 800437e:	6834      	ldr	r4, [r6, #0]
 8004380:	4626      	mov	r6, r4
 8004382:	2e00      	cmp	r6, #0
 8004384:	d140      	bne.n	8004408 <_malloc_r+0xcc>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	4631      	mov	r1, r6
 800438a:	4638      	mov	r0, r7
 800438c:	eb04 0803 	add.w	r8, r4, r3
 8004390:	f000 f878 	bl	8004484 <_sbrk_r>
 8004394:	4580      	cmp	r8, r0
 8004396:	d13a      	bne.n	800440e <_malloc_r+0xd2>
 8004398:	6821      	ldr	r1, [r4, #0]
 800439a:	3503      	adds	r5, #3
 800439c:	1a6d      	subs	r5, r5, r1
 800439e:	f025 0503 	bic.w	r5, r5, #3
 80043a2:	3508      	adds	r5, #8
 80043a4:	2d0c      	cmp	r5, #12
 80043a6:	bf38      	it	cc
 80043a8:	250c      	movcc	r5, #12
 80043aa:	4629      	mov	r1, r5
 80043ac:	4638      	mov	r0, r7
 80043ae:	f7ff ffa5 	bl	80042fc <sbrk_aligned>
 80043b2:	3001      	adds	r0, #1
 80043b4:	d02b      	beq.n	800440e <_malloc_r+0xd2>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	442b      	add	r3, r5
 80043ba:	6023      	str	r3, [r4, #0]
 80043bc:	e00e      	b.n	80043dc <_malloc_r+0xa0>
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	1b52      	subs	r2, r2, r5
 80043c2:	d41e      	bmi.n	8004402 <_malloc_r+0xc6>
 80043c4:	2a0b      	cmp	r2, #11
 80043c6:	d916      	bls.n	80043f6 <_malloc_r+0xba>
 80043c8:	1961      	adds	r1, r4, r5
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	6025      	str	r5, [r4, #0]
 80043ce:	bf18      	it	ne
 80043d0:	6059      	strne	r1, [r3, #4]
 80043d2:	6863      	ldr	r3, [r4, #4]
 80043d4:	bf08      	it	eq
 80043d6:	6031      	streq	r1, [r6, #0]
 80043d8:	5162      	str	r2, [r4, r5]
 80043da:	604b      	str	r3, [r1, #4]
 80043dc:	4638      	mov	r0, r7
 80043de:	f104 060b 	add.w	r6, r4, #11
 80043e2:	f000 f865 	bl	80044b0 <__malloc_unlock>
 80043e6:	f026 0607 	bic.w	r6, r6, #7
 80043ea:	1d23      	adds	r3, r4, #4
 80043ec:	1af2      	subs	r2, r6, r3
 80043ee:	d0b6      	beq.n	800435e <_malloc_r+0x22>
 80043f0:	1b9b      	subs	r3, r3, r6
 80043f2:	50a3      	str	r3, [r4, r2]
 80043f4:	e7b3      	b.n	800435e <_malloc_r+0x22>
 80043f6:	6862      	ldr	r2, [r4, #4]
 80043f8:	42a3      	cmp	r3, r4
 80043fa:	bf0c      	ite	eq
 80043fc:	6032      	streq	r2, [r6, #0]
 80043fe:	605a      	strne	r2, [r3, #4]
 8004400:	e7ec      	b.n	80043dc <_malloc_r+0xa0>
 8004402:	4623      	mov	r3, r4
 8004404:	6864      	ldr	r4, [r4, #4]
 8004406:	e7b2      	b.n	800436e <_malloc_r+0x32>
 8004408:	4634      	mov	r4, r6
 800440a:	6876      	ldr	r6, [r6, #4]
 800440c:	e7b9      	b.n	8004382 <_malloc_r+0x46>
 800440e:	230c      	movs	r3, #12
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	4638      	mov	r0, r7
 8004414:	f000 f84c 	bl	80044b0 <__malloc_unlock>
 8004418:	e7a1      	b.n	800435e <_malloc_r+0x22>
 800441a:	6025      	str	r5, [r4, #0]
 800441c:	e7de      	b.n	80043dc <_malloc_r+0xa0>
 800441e:	bf00      	nop
 8004420:	200004b4 	.word	0x200004b4

08004424 <_realloc_r>:
 8004424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004428:	4680      	mov	r8, r0
 800442a:	4614      	mov	r4, r2
 800442c:	460e      	mov	r6, r1
 800442e:	b921      	cbnz	r1, 800443a <_realloc_r+0x16>
 8004430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004434:	4611      	mov	r1, r2
 8004436:	f7ff bf81 	b.w	800433c <_malloc_r>
 800443a:	b92a      	cbnz	r2, 8004448 <_realloc_r+0x24>
 800443c:	f7ff ff12 	bl	8004264 <_free_r>
 8004440:	4625      	mov	r5, r4
 8004442:	4628      	mov	r0, r5
 8004444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004448:	f000 f838 	bl	80044bc <_malloc_usable_size_r>
 800444c:	4284      	cmp	r4, r0
 800444e:	4607      	mov	r7, r0
 8004450:	d802      	bhi.n	8004458 <_realloc_r+0x34>
 8004452:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004456:	d812      	bhi.n	800447e <_realloc_r+0x5a>
 8004458:	4621      	mov	r1, r4
 800445a:	4640      	mov	r0, r8
 800445c:	f7ff ff6e 	bl	800433c <_malloc_r>
 8004460:	4605      	mov	r5, r0
 8004462:	2800      	cmp	r0, #0
 8004464:	d0ed      	beq.n	8004442 <_realloc_r+0x1e>
 8004466:	42bc      	cmp	r4, r7
 8004468:	4622      	mov	r2, r4
 800446a:	4631      	mov	r1, r6
 800446c:	bf28      	it	cs
 800446e:	463a      	movcs	r2, r7
 8004470:	f7ff fed0 	bl	8004214 <memcpy>
 8004474:	4631      	mov	r1, r6
 8004476:	4640      	mov	r0, r8
 8004478:	f7ff fef4 	bl	8004264 <_free_r>
 800447c:	e7e1      	b.n	8004442 <_realloc_r+0x1e>
 800447e:	4635      	mov	r5, r6
 8004480:	e7df      	b.n	8004442 <_realloc_r+0x1e>
	...

08004484 <_sbrk_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	4d06      	ldr	r5, [pc, #24]	; (80044a0 <_sbrk_r+0x1c>)
 8004488:	2300      	movs	r3, #0
 800448a:	4604      	mov	r4, r0
 800448c:	4608      	mov	r0, r1
 800448e:	602b      	str	r3, [r5, #0]
 8004490:	f7fc fa90 	bl	80009b4 <_sbrk>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_sbrk_r+0x1a>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b103      	cbz	r3, 800449e <_sbrk_r+0x1a>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	200004bc 	.word	0x200004bc

080044a4 <__malloc_lock>:
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <__malloc_lock+0x8>)
 80044a6:	f000 b811 	b.w	80044cc <__retarget_lock_acquire_recursive>
 80044aa:	bf00      	nop
 80044ac:	200004c0 	.word	0x200004c0

080044b0 <__malloc_unlock>:
 80044b0:	4801      	ldr	r0, [pc, #4]	; (80044b8 <__malloc_unlock+0x8>)
 80044b2:	f000 b80c 	b.w	80044ce <__retarget_lock_release_recursive>
 80044b6:	bf00      	nop
 80044b8:	200004c0 	.word	0x200004c0

080044bc <_malloc_usable_size_r>:
 80044bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c0:	1f18      	subs	r0, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfbc      	itt	lt
 80044c6:	580b      	ldrlt	r3, [r1, r0]
 80044c8:	18c0      	addlt	r0, r0, r3
 80044ca:	4770      	bx	lr

080044cc <__retarget_lock_acquire_recursive>:
 80044cc:	4770      	bx	lr

080044ce <__retarget_lock_release_recursive>:
 80044ce:	4770      	bx	lr

080044d0 <_init>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	bf00      	nop
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr

080044dc <_fini>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	bf00      	nop
 80044e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	469e      	mov	lr, r3
 80044e6:	4770      	bx	lr
