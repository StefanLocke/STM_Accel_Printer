
AccelerometerPrint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800453c  0800453c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800453c  0800453c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800453c  0800453c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000454  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004c4  200004c4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118d0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021eb  00000000  00000000  00031970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00033b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c98  00000000  00000000  000348d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d916  00000000  00000000  00035568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b5a  00000000  00000000  00052e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3e2f  00000000  00000000  000649d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118807  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c4c  00000000  00000000  00118858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800449c 	.word	0x0800449c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800449c 	.word	0x0800449c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d013      	beq.n	80002c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00b      	beq.n	80002c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002a8:	e000      	b.n	80002ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80002aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	b2d2      	uxtb	r2, r2
 80002be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <print>:
static void MX_UART4_Init(void);
static void MX_USB_PCD_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

int print(char * string) {
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b084      	sub	sp, #16
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
	for (int i = 0 ; i < strlen(string); i++) {
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	e009      	b.n	80002f0 <print+0x22>
		ITM_SendChar(string[i]);
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	4413      	add	r3, r2
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f7ff ffcb 	bl	8000280 <ITM_SendChar>
	for (int i = 0 ; i < strlen(string); i++) {
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	3301      	adds	r3, #1
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f7ff ff6d 	bl	80001d0 <strlen>
 80002f6:	4602      	mov	r2, r0
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d8ee      	bhi.n	80002dc <print+0xe>
	}
	return 1;
 80002fe:	2301      	movs	r3, #1
}
 8000300:	4618      	mov	r0, r3
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030c:	f000 fbce 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000310:	f000 f846 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000314:	f000 f978 	bl	8000608 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000318:	f000 f8e4 	bl	80004e4 <MX_SPI1_Init>
  MX_UART4_Init();
 800031c:	f000 f920 	bl	8000560 <MX_UART4_Init>
  MX_USB_PCD_Init();
 8000320:	f000 f950 	bl	80005c4 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8000324:	f000 f89e 	bl	8000464 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  set_CTRL_REG1_A();
 8000328:	f000 f802 	bl	8000330 <set_CTRL_REG1_A>





  while (1)
 800032c:	e7fe      	b.n	800032c <main+0x24>
	...

08000330 <set_CTRL_REG1_A>:
  }
  /* USER CODE END 3 */
}


void set_CTRL_REG1_A(){
 8000330:	b580      	push	{r7, lr}
 8000332:	b08c      	sub	sp, #48	; 0x30
 8000334:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint16_t accel_read_address = 0x33;
 8000336:	2333      	movs	r3, #51	; 0x33
 8000338:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t accel_write_address = 0x32;
 800033a:	2332      	movs	r3, #50	; 0x32
 800033c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t buf[12];


	char string[20]= "";
 800033e:	2300      	movs	r3, #0
 8000340:	603b      	str	r3, [r7, #0]
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
	print("SAD + W\n");
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <set_CTRL_REG1_A+0x64>)
 8000350:	f7ff ffbd 	bl	80002ce <print>
	buf[0]= 0x20; //CTRL_REG1_A
 8000354:	2320      	movs	r3, #32
 8000356:	753b      	strb	r3, [r7, #20]
	buf[1]= 0x77; //01110111
 8000358:	2377      	movs	r3, #119	; 0x77
 800035a:	757b      	strb	r3, [r7, #21]
	ret = HAL_I2C_Master_Transmit(&hi2c1, accel_write_address, buf, 2, HAL_MAX_DELAY);
 800035c:	f107 0214 	add.w	r2, r7, #20
 8000360:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2302      	movs	r3, #2
 800036a:	480b      	ldr	r0, [pc, #44]	; (8000398 <set_CTRL_REG1_A+0x68>)
 800036c:	f000 ff0c 	bl	8001188 <HAL_I2C_Master_Transmit>
 8000370:	4603      	mov	r3, r0
 8000372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	sprintf(string,"status is : %x\n",ret);
 8000376:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800037a:	463b      	mov	r3, r7
 800037c:	4907      	ldr	r1, [pc, #28]	; (800039c <set_CTRL_REG1_A+0x6c>)
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fc1e 	bl	8003bc0 <siprintf>
	print(string);
 8000384:	463b      	mov	r3, r7
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ffa1 	bl	80002ce <print>
//	  print("DATA");
//	   buf[0]= 0x77; //01110111
//	   ret = HAL_I2C_Master_Transmit(&hi2c1, accel_write_address, buf, 1, HAL_MAX_DELAY);
//	   sprintf(string,"status is : %x\n",ret);
//	   print(string);
}
 800038c:	bf00      	nop
 800038e:	3728      	adds	r7, #40	; 0x28
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	080044b4 	.word	0x080044b4
 8000398:	2000008c 	.word	0x2000008c
 800039c:	080044c0 	.word	0x080044c0

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b09e      	sub	sp, #120	; 0x78
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003aa:	2228      	movs	r2, #40	; 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 fbfe 	bl	8003bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c4:	463b      	mov	r3, r7
 80003c6:	223c      	movs	r2, #60	; 0x3c
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f003 fbf0 	bl	8003bb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003d0:	2303      	movs	r3, #3
 80003d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003de:	2301      	movs	r3, #1
 80003e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e2:	2310      	movs	r3, #16
 80003e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e6:	2302      	movs	r3, #2
 80003e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003f4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fab2 	bl	8001964 <HAL_RCC_OscConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000406:	f000 f97d 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	230f      	movs	r3, #15
 800040c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040e:	2302      	movs	r3, #2
 8000410:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800041a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000420:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000424:	2102      	movs	r1, #2
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fada 	bl	80029e0 <HAL_RCC_ClockConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000432:	f000 f967 	bl	8000704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <SystemClock_Config+0xc0>)
 8000438:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000442:	2300      	movs	r3, #0
 8000444:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000446:	463b      	mov	r3, r7
 8000448:	4618      	mov	r0, r3
 800044a:	f002 fcff 	bl	8002e4c <HAL_RCCEx_PeriphCLKConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000454:	f000 f956 	bl	8000704 <Error_Handler>
  }
}
 8000458:	bf00      	nop
 800045a:	3778      	adds	r7, #120	; 0x78
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	00020028 	.word	0x00020028

08000464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_I2C1_Init+0x74>)
 800046a:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <MX_I2C1_Init+0x78>)
 800046c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000470:	4a1b      	ldr	r2, [pc, #108]	; (80004e0 <MX_I2C1_Init+0x7c>)
 8000472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_I2C1_Init+0x74>)
 800047c:	2201      	movs	r2, #1
 800047e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_I2C1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800049e:	480e      	ldr	r0, [pc, #56]	; (80004d8 <MX_I2C1_Init+0x74>)
 80004a0:	f000 fde2 	bl	8001068 <HAL_I2C_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004aa:	f000 f92b 	bl	8000704 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ae:	2100      	movs	r1, #0
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <MX_I2C1_Init+0x74>)
 80004b2:	f001 f8e1 	bl	8001678 <HAL_I2CEx_ConfigAnalogFilter>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004bc:	f000 f922 	bl	8000704 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c0:	2100      	movs	r1, #0
 80004c2:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_I2C1_Init+0x74>)
 80004c4:	f001 f923 	bl	800170e <HAL_I2CEx_ConfigDigitalFilter>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ce:	f000 f919 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2000008c 	.word	0x2000008c
 80004dc:	40005400 	.word	0x40005400
 80004e0:	2000090e 	.word	0x2000090e

080004e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_SPI1_Init+0x74>)
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <MX_SPI1_Init+0x78>)
 80004ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_SPI1_Init+0x74>)
 80004f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_SPI1_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <MX_SPI1_Init+0x74>)
 80004fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000502:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_SPI1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_SPI1_Init+0x74>)
 8000512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000516:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_SPI1_Init+0x74>)
 800051a:	2208      	movs	r2, #8
 800051c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_SPI1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_SPI1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_SPI1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_SPI1_Init+0x74>)
 8000532:	2207      	movs	r2, #7
 8000534:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_SPI1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_SPI1_Init+0x74>)
 800053e:	2208      	movs	r2, #8
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_SPI1_Init+0x74>)
 8000544:	f002 fe32 	bl	80031ac <HAL_SPI_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800054e:	f000 f8d9 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200000d8 	.word	0x200000d8
 800055c:	40013000 	.word	0x40013000

08000560 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_UART4_Init+0x5c>)
 8000566:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <MX_UART4_Init+0x60>)
 8000568:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_UART4_Init+0x5c>)
 800056c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000570:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_UART4_Init+0x5c>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_UART4_Init+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_UART4_Init+0x5c>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <MX_UART4_Init+0x5c>)
 8000586:	220c      	movs	r2, #12
 8000588:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_UART4_Init+0x5c>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <MX_UART4_Init+0x5c>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_UART4_Init+0x5c>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <MX_UART4_Init+0x5c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_MultiProcessor_Init(&huart4, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_UART4_Init+0x5c>)
 80005a8:	f002 feab 	bl	8003302 <HAL_MultiProcessor_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 80005b2:	f000 f8a7 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000013c 	.word	0x2000013c
 80005c0:	40004c00 	.word	0x40004c00

080005c4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <MX_USB_PCD_Init+0x3c>)
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <MX_USB_PCD_Init+0x40>)
 80005cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USB_PCD_Init+0x3c>)
 80005d0:	2208      	movs	r2, #8
 80005d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_USB_PCD_Init+0x3c>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USB_PCD_Init+0x3c>)
 80005dc:	2202      	movs	r2, #2
 80005de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MX_USB_PCD_Init+0x3c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USB_PCD_Init+0x3c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_USB_PCD_Init+0x3c>)
 80005ee:	f001 f8da 	bl	80017a6 <HAL_PCD_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005f8:	f000 f884 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200001c0 	.word	0x200001c0
 8000604:	40005c00 	.word	0x40005c00

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800061e:	4b37      	ldr	r3, [pc, #220]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a36      	ldr	r2, [pc, #216]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <MX_GPIO_Init+0xf4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a30      	ldr	r2, [pc, #192]	; (80006fc <MX_GPIO_Init+0xf4>)
 800063c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a2a      	ldr	r2, [pc, #168]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b28      	ldr	r3, [pc, #160]	; (80006fc <MX_GPIO_Init+0xf4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a24      	ldr	r2, [pc, #144]	; (80006fc <MX_GPIO_Init+0xf4>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b22      	ldr	r3, [pc, #136]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a1e      	ldr	r2, [pc, #120]	; (80006fc <MX_GPIO_Init+0xf4>)
 8000684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_GPIO_Init+0xf4>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000696:	2200      	movs	r2, #0
 8000698:	f64f 7108 	movw	r1, #65288	; 0xff08
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <MX_GPIO_Init+0xf8>)
 800069e:	f000 fccb 	bl	8001038 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80006a2:	2337      	movs	r3, #55	; 0x37
 80006a4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	4812      	ldr	r0, [pc, #72]	; (8000700 <MX_GPIO_Init+0xf8>)
 80006b8:	f000 fb44 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006bc:	f64f 7308 	movw	r3, #65288	; 0xff08
 80006c0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <MX_GPIO_Init+0xf8>)
 80006d6:	f000 fb35 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006da:	2301      	movs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f000 fb28 	bl	8000d44 <HAL_GPIO_Init>

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000
 8000700:	48001000 	.word	0x48001000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x44>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x44>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x44>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x44>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x44>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x44>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000746:	2007      	movs	r0, #7
 8000748:	f000 fac8 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_I2C_MspInit+0x7c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d127      	bne.n	80007ca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 8000780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000792:	23c0      	movs	r3, #192	; 0xc0
 8000794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000796:	2312      	movs	r3, #18
 8000798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079a:	2301      	movs	r3, #1
 800079c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079e:	2303      	movs	r3, #3
 80007a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a2:	2304      	movs	r3, #4
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <HAL_I2C_MspInit+0x84>)
 80007ae:	f000 fac9 	bl	8000d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40005400 	.word	0x40005400
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000400 	.word	0x48000400

080007e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <HAL_SPI_MspInit+0x7c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d128      	bne.n	8000854 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_SPI_MspInit+0x80>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <HAL_SPI_MspInit+0x80>)
 8000808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_SPI_MspInit+0x80>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_SPI_MspInit+0x80>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <HAL_SPI_MspInit+0x80>)
 8000820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000824:	6153      	str	r3, [r2, #20]
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_SPI_MspInit+0x80>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000832:	23e0      	movs	r3, #224	; 0xe0
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000842:	2305      	movs	r3, #5
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000850:	f000 fa78 	bl	8000d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40013000 	.word	0x40013000
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_UART_MspInit+0x7c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d128      	bne.n	80008d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0x80>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <HAL_UART_MspInit+0x80>)
 800088c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_UART_MspInit+0x80>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0x80>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <HAL_UART_MspInit+0x80>)
 80008a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_UART_MspInit+0x80>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008bc:	2312      	movs	r3, #18
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80008c8:	2305      	movs	r3, #5
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_UART_MspInit+0x84>)
 80008d4:	f000 fa36 	bl	8000d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40004c00 	.word	0x40004c00
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000800 	.word	0x48000800

080008ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a18      	ldr	r2, [pc, #96]	; (800096c <HAL_PCD_MspInit+0x80>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d129      	bne.n	8000962 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_PCD_MspInit+0x84>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_PCD_MspInit+0x84>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_PCD_MspInit+0x84>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000938:	230e      	movs	r3, #14
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f000 f9fd 	bl	8000d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_PCD_MspInit+0x84>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_PCD_MspInit+0x84>)
 8000950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_PCD_MspInit+0x84>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40005c00 	.word	0x40005c00
 8000970:	40021000 	.word	0x40021000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 f8ba 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f003 f8b0 	bl	8003b5c <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000a000 	.word	0x2000a000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	200004ac 	.word	0x200004ac
 8000a30:	200004c8 	.word	0x200004c8

08000a34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5e:	490e      	ldr	r1, [pc, #56]	; (8000a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <LoopForever+0xe>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a74:	4c0b      	ldr	r4, [pc, #44]	; (8000aa4 <LoopForever+0x16>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a82:	f7ff ffd7 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f003 f86f 	bl	8003b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8a:	f7ff fc3d 	bl	8000308 <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a90:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a9c:	08004544 	.word	0x08004544
  ldr r2, =_sbss
 8000aa0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa4:	200004c4 	.word	0x200004c4

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x28>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f90d 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fe22 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f917 	bl	8000d2a <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b14:	f000 f8ed 	bl	8000cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	200004b0 	.word	0x200004b0

08000b60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200004b0 	.word	0x200004b0

08000b78 <__NVIC_SetPriorityGrouping>:
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_SetPriority>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff47 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff5c 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff8e 	bl	8000c30 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffb0 	bl	8000c98 <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	e154      	b.n	8000ffe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8146 	beq.w	8000ff8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d005      	beq.n	8000d84 <HAL_GPIO_Init+0x40>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d130      	bne.n	8000de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	f003 0201 	and.w	r2, r3, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d017      	beq.n	8000e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d123      	bne.n	8000e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	6939      	ldr	r1, [r7, #16]
 8000e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0203 	and.w	r2, r3, #3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80a0 	beq.w	8000ff8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb8:	4b58      	ldr	r3, [pc, #352]	; (800101c <HAL_GPIO_Init+0x2d8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a57      	ldr	r2, [pc, #348]	; (800101c <HAL_GPIO_Init+0x2d8>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b55      	ldr	r3, [pc, #340]	; (800101c <HAL_GPIO_Init+0x2d8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed0:	4a53      	ldr	r2, [pc, #332]	; (8001020 <HAL_GPIO_Init+0x2dc>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000efa:	d019      	beq.n	8000f30 <HAL_GPIO_Init+0x1ec>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a49      	ldr	r2, [pc, #292]	; (8001024 <HAL_GPIO_Init+0x2e0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d013      	beq.n	8000f2c <HAL_GPIO_Init+0x1e8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a48      	ldr	r2, [pc, #288]	; (8001028 <HAL_GPIO_Init+0x2e4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d00d      	beq.n	8000f28 <HAL_GPIO_Init+0x1e4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a47      	ldr	r2, [pc, #284]	; (800102c <HAL_GPIO_Init+0x2e8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d007      	beq.n	8000f24 <HAL_GPIO_Init+0x1e0>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a46      	ldr	r2, [pc, #280]	; (8001030 <HAL_GPIO_Init+0x2ec>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d101      	bne.n	8000f20 <HAL_GPIO_Init+0x1dc>
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e008      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f20:	2305      	movs	r3, #5
 8000f22:	e006      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f24:	2303      	movs	r3, #3
 8000f26:	e004      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f30:	2300      	movs	r3, #0
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f42:	4937      	ldr	r1, [pc, #220]	; (8001020 <HAL_GPIO_Init+0x2dc>)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f50:	4b38      	ldr	r3, [pc, #224]	; (8001034 <HAL_GPIO_Init+0x2f0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f74:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <HAL_GPIO_Init+0x2f0>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <HAL_GPIO_Init+0x2f0>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f9e:	4a25      	ldr	r2, [pc, #148]	; (8001034 <HAL_GPIO_Init+0x2f0>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <HAL_GPIO_Init+0x2f0>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fc8:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <HAL_GPIO_Init+0x2f0>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_GPIO_Init+0x2f0>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <HAL_GPIO_Init+0x2f0>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	f47f aea3 	bne.w	8000d54 <HAL_GPIO_Init+0x10>
  }
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000
 8001024:	48000400 	.word	0x48000400
 8001028:	48000800 	.word	0x48000800
 800102c:	48000c00 	.word	0x48000c00
 8001030:	48001000 	.word	0x48001000
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001054:	e002      	b.n	800105c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e081      	b.n	800117e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d106      	bne.n	8001094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fb62 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2224      	movs	r2, #36	; 0x24
 8001098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d107      	bne.n	80010e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	e006      	b.n	80010f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d104      	bne.n	8001102 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001100:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001114:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001124:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69d9      	ldr	r1, [r3, #28]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1a      	ldr	r2, [r3, #32]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2220      	movs	r2, #32
 800116a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af02      	add	r7, sp, #8
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	461a      	mov	r2, r3
 8001194:	460b      	mov	r3, r1
 8001196:	817b      	strh	r3, [r7, #10]
 8001198:	4613      	mov	r3, r2
 800119a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	f040 80da 	bne.w	800135e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <HAL_I2C_Master_Transmit+0x30>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e0d3      	b.n	8001360 <HAL_I2C_Master_Transmit+0x1d8>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011c0:	f7ff fcce 	bl	8000b60 <HAL_GetTick>
 80011c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2319      	movs	r3, #25
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 f8f0 	bl	80013b8 <I2C_WaitOnFlagUntilTimeout>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0be      	b.n	8001360 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2221      	movs	r2, #33	; 0x21
 80011e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2210      	movs	r2, #16
 80011ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	893a      	ldrh	r2, [r7, #8]
 8001202:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800120e:	b29b      	uxth	r3, r3
 8001210:	2bff      	cmp	r3, #255	; 0xff
 8001212:	d90e      	bls.n	8001232 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	22ff      	movs	r2, #255	; 0xff
 8001218:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800121e:	b2da      	uxtb	r2, r3
 8001220:	8979      	ldrh	r1, [r7, #10]
 8001222:	4b51      	ldr	r3, [pc, #324]	; (8001368 <HAL_I2C_Master_Transmit+0x1e0>)
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 f9f6 	bl	800161c <I2C_TransferConfig>
 8001230:	e06c      	b.n	800130c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001236:	b29a      	uxth	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001240:	b2da      	uxtb	r2, r3
 8001242:	8979      	ldrh	r1, [r7, #10]
 8001244:	4b48      	ldr	r3, [pc, #288]	; (8001368 <HAL_I2C_Master_Transmit+0x1e0>)
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 f9e5 	bl	800161c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001252:	e05b      	b.n	800130c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	6a39      	ldr	r1, [r7, #32]
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f000 f8ed 	bl	8001438 <I2C_WaitOnTXISFlagUntilTimeout>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e07b      	b.n	8001360 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001282:	b29b      	uxth	r3, r3
 8001284:	3b01      	subs	r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001290:	3b01      	subs	r3, #1
 8001292:	b29a      	uxth	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800129c:	b29b      	uxth	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d034      	beq.n	800130c <HAL_I2C_Master_Transmit+0x184>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d130      	bne.n	800130c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	2200      	movs	r2, #0
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f000 f87f 	bl	80013b8 <I2C_WaitOnFlagUntilTimeout>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e04d      	b.n	8001360 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d90e      	bls.n	80012ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	22ff      	movs	r2, #255	; 0xff
 80012d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	8979      	ldrh	r1, [r7, #10]
 80012dc:	2300      	movs	r3, #0
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 f999 	bl	800161c <I2C_TransferConfig>
 80012ea:	e00f      	b.n	800130c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	8979      	ldrh	r1, [r7, #10]
 80012fe:	2300      	movs	r3, #0
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f988 	bl	800161c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001310:	b29b      	uxth	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d19e      	bne.n	8001254 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	6a39      	ldr	r1, [r7, #32]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f8cc 	bl	80014b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e01a      	b.n	8001360 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2220      	movs	r2, #32
 8001330:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_I2C_Master_Transmit+0x1e4>)
 800133e:	400b      	ands	r3, r1
 8001340:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2220      	movs	r2, #32
 8001346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800135e:	2302      	movs	r3, #2
  }
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	80002000 	.word	0x80002000
 800136c:	fe00e800 	.word	0xfe00e800

08001370 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b02      	cmp	r3, #2
 8001384:	d103      	bne.n	800138e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b01      	cmp	r3, #1
 800139a:	d007      	beq.n	80013ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	619a      	str	r2, [r3, #24]
  }
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013c8:	e022      	b.n	8001410 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d0:	d01e      	beq.n	8001410 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013d2:	f7ff fbc5 	bl	8000b60 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d302      	bcc.n	80013e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d113      	bne.n	8001410 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f043 0220 	orr.w	r2, r3, #32
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2220      	movs	r2, #32
 80013f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e00f      	b.n	8001430 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	4013      	ands	r3, r2
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	429a      	cmp	r2, r3
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	429a      	cmp	r2, r3
 800142c:	d0cd      	beq.n	80013ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001444:	e02c      	b.n	80014a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f870 	bl	8001530 <I2C_IsAcknowledgeFailed>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e02a      	b.n	80014b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001460:	d01e      	beq.n	80014a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001462:	f7ff fb7d 	bl	8000b60 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	429a      	cmp	r2, r3
 8001470:	d302      	bcc.n	8001478 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d113      	bne.n	80014a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	f043 0220 	orr.w	r2, r3, #32
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2220      	movs	r2, #32
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e007      	b.n	80014b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d1cb      	bne.n	8001446 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014c4:	e028      	b.n	8001518 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f830 	bl	8001530 <I2C_IsAcknowledgeFailed>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e026      	b.n	8001528 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014da:	f7ff fb41 	bl	8000b60 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d302      	bcc.n	80014f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d113      	bne.n	8001518 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	f043 0220 	orr.w	r2, r3, #32
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e007      	b.n	8001528 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	2b20      	cmp	r3, #32
 8001524:	d1cf      	bne.n	80014c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b10      	cmp	r3, #16
 8001548:	d161      	bne.n	800160e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001558:	d02b      	beq.n	80015b2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001568:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800156a:	e022      	b.n	80015b2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001572:	d01e      	beq.n	80015b2 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001574:	f7ff faf4 	bl	8000b60 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	429a      	cmp	r2, r3
 8001582:	d302      	bcc.n	800158a <I2C_IsAcknowledgeFailed+0x5a>
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d113      	bne.n	80015b2 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f043 0220 	orr.w	r2, r3, #32
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2220      	movs	r2, #32
 800159a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e02e      	b.n	8001610 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0320 	and.w	r3, r3, #32
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d1d5      	bne.n	800156c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2210      	movs	r2, #16
 80015c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2220      	movs	r2, #32
 80015ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f7ff fecd 	bl	8001370 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <I2C_IsAcknowledgeFailed+0xe8>)
 80015e2:	400b      	ands	r3, r1
 80015e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f043 0204 	orr.w	r2, r3, #4
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2220      	movs	r2, #32
 80015f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	fe00e800 	.word	0xfe00e800

0800161c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	817b      	strh	r3, [r7, #10]
 800162a:	4613      	mov	r3, r2
 800162c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	0d5b      	lsrs	r3, r3, #21
 8001638:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <I2C_TransferConfig+0x58>)
 800163e:	430b      	orrs	r3, r1
 8001640:	43db      	mvns	r3, r3
 8001642:	ea02 0103 	and.w	r1, r2, r3
 8001646:	897b      	ldrh	r3, [r7, #10]
 8001648:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800164c:	7a7b      	ldrb	r3, [r7, #9]
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	431a      	orrs	r2, r3
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	431a      	orrs	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	03ff63ff 	.word	0x03ff63ff

08001678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b20      	cmp	r3, #32
 800168c:	d138      	bne.n	8001700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001698:	2302      	movs	r3, #2
 800169a:	e032      	b.n	8001702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2224      	movs	r2, #36	; 0x24
 80016a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6819      	ldr	r1, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2220      	movs	r2, #32
 80016f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e000      	b.n	8001702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001700:	2302      	movs	r3, #2
  }
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b20      	cmp	r3, #32
 8001722:	d139      	bne.n	8001798 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800172e:	2302      	movs	r3, #2
 8001730:	e033      	b.n	800179a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2224      	movs	r2, #36	; 0x24
 800173e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001760:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0201 	orr.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2220      	movs	r2, #32
 8001788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	e000      	b.n	800179a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001798:	2302      	movs	r3, #2
  }
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a8:	b08b      	sub	sp, #44	; 0x2c
 80017aa:	af06      	add	r7, sp, #24
 80017ac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0d0      	b.n	800195a <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d106      	bne.n	80017d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff f88d 	bl	80008ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 f97f 	bl	8003ae2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e04c      	b.n	8001884 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	3301      	adds	r3, #1
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	b298      	uxth	r0, r3
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	3336      	adds	r3, #54	; 0x36
 8001828:	4602      	mov	r2, r0
 800182a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	3303      	adds	r3, #3
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	3338      	adds	r3, #56	; 0x38
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	333c      	adds	r3, #60	; 0x3c
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	3340      	adds	r3, #64	; 0x40
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	3301      	adds	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	d3ad      	bcc.n	80017ea <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e044      	b.n	800191e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	3301      	adds	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	d3b5      	bcc.n	8001894 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	687e      	ldr	r6, [r7, #4]
 8001930:	466d      	mov	r5, sp
 8001932:	f106 0410 	add.w	r4, r6, #16
 8001936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	602b      	str	r3, [r5, #0]
 800193e:	1d33      	adds	r3, r6, #4
 8001940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001942:	6838      	ldr	r0, [r7, #0]
 8001944:	f002 f8e8 	bl	8003b18 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800196a:	af00      	add	r7, sp, #0
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001974:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	f001 b823 	b.w	80029d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 817d 	beq.w	8001c9a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019a0:	4bbc      	ldr	r3, [pc, #752]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ac:	4bb9      	ldr	r3, [pc, #740]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d15c      	bne.n	8001a72 <HAL_RCC_OscConfig+0x10e>
 80019b8:	4bb6      	ldr	r3, [pc, #728]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d155      	bne.n	8001a72 <HAL_RCC_OscConfig+0x10e>
 80019c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	095b      	lsrs	r3, r3, #5
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d102      	bne.n	80019f8 <HAL_RCC_OscConfig+0x94>
 80019f2:	4ba8      	ldr	r3, [pc, #672]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	e015      	b.n	8001a24 <HAL_RCC_OscConfig+0xc0>
 80019f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a10:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a20:	4b9c      	ldr	r3, [pc, #624]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a28:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a30:	fa92 f2a2 	rbit	r2, r2
 8001a34:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a38:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a3c:	fab2 f282 	clz	r2, r2
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f042 0220 	orr.w	r2, r2, #32
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f002 021f 	and.w	r2, r2, #31
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 811f 	beq.w	8001c98 <HAL_RCC_OscConfig+0x334>
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 8116 	bne.w	8001c98 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f000 bfaf 	b.w	80029d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12e>
 8001a84:	4b83      	ldr	r3, [pc, #524]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a82      	ldr	r2, [pc, #520]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	e036      	b.n	8001b00 <HAL_RCC_OscConfig+0x19c>
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x158>
 8001aa2:	4b7c      	ldr	r3, [pc, #496]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a7b      	ldr	r2, [pc, #492]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b79      	ldr	r3, [pc, #484]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a78      	ldr	r2, [pc, #480]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e021      	b.n	8001b00 <HAL_RCC_OscConfig+0x19c>
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x184>
 8001ace:	4b71      	ldr	r3, [pc, #452]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a70      	ldr	r2, [pc, #448]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b6e      	ldr	r3, [pc, #440]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6d      	ldr	r2, [pc, #436]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0x19c>
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a69      	ldr	r2, [pc, #420]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a66      	ldr	r2, [pc, #408]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b00:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	f023 020f 	bic.w	r2, r3, #15
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	495f      	ldr	r1, [pc, #380]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d059      	beq.n	8001bde <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f819 	bl	8000b60 <HAL_GetTick>
 8001b2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff f814 	bl	8000b60 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d902      	bls.n	8001b4a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	f000 bf43 	b.w	80029d0 <HAL_RCC_OscConfig+0x106c>
 8001b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d102      	bne.n	8001b7c <HAL_RCC_OscConfig+0x218>
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	e015      	b.n	8001ba8 <HAL_RCC_OscConfig+0x244>
 8001b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b80:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b94:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b98:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ba4:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bb0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bb4:	fa92 f2a2 	rbit	r2, r2
 8001bb8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001bbc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001bc0:	fab2 f282 	clz	r2, r2
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f042 0220 	orr.w	r2, r2, #32
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f002 021f 	and.w	r2, r2, #31
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ab      	beq.n	8001b34 <HAL_RCC_OscConfig+0x1d0>
 8001bdc:	e05d      	b.n	8001c9a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7fe ffbf 	bl	8000b60 <HAL_GetTick>
 8001be2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7fe ffba 	bl	8000b60 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b64      	cmp	r3, #100	; 0x64
 8001bf6:	d902      	bls.n	8001bfe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	f000 bee9 	b.w	80029d0 <HAL_RCC_OscConfig+0x106c>
 8001bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c02:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_RCC_OscConfig+0x2cc>
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	e015      	b.n	8001c5c <HAL_RCC_OscConfig+0x2f8>
 8001c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c34:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c48:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c60:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c64:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c68:	fa92 f2a2 	rbit	r2, r2
 8001c6c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c70:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c74:	fab2 f282 	clz	r2, r2
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f042 0220 	orr.w	r2, r2, #32
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f002 021f 	and.w	r2, r2, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ab      	bne.n	8001be8 <HAL_RCC_OscConfig+0x284>
 8001c90:	e003      	b.n	8001c9a <HAL_RCC_OscConfig+0x336>
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 817d 	beq.w	8001faa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cb0:	4ba6      	ldr	r3, [pc, #664]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00b      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cbc:	4ba3      	ldr	r3, [pc, #652]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d172      	bne.n	8001dae <HAL_RCC_OscConfig+0x44a>
 8001cc8:	4ba0      	ldr	r3, [pc, #640]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d16c      	bne.n	8001dae <HAL_RCC_OscConfig+0x44a>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ce6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_OscConfig+0x3a0>
 8001cfe:	4b93      	ldr	r3, [pc, #588]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e013      	b.n	8001d2c <HAL_RCC_OscConfig+0x3c8>
 8001d04:	2302      	movs	r3, #2
 8001d06:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d28:	4b88      	ldr	r3, [pc, #544]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d32:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d36:	fa92 f2a2 	rbit	r2, r2
 8001d3a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d3e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d42:	fab2 f282 	clz	r2, r2
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f002 021f 	and.w	r2, r2, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_RCC_OscConfig+0x410>
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f000 be2e 	b.w	80029d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b75      	ldr	r3, [pc, #468]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	21f8      	movs	r1, #248	; 0xf8
 8001d8a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d92:	fa91 f1a1 	rbit	r1, r1
 8001d96:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d9a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d9e:	fab1 f181 	clz	r1, r1
 8001da2:	b2c9      	uxtb	r1, r1
 8001da4:	408b      	lsls	r3, r1
 8001da6:	4969      	ldr	r1, [pc, #420]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dac:	e0fd      	b.n	8001faa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8088 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x56c>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001dd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	461a      	mov	r2, r3
 8001de8:	2301      	movs	r3, #1
 8001dea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe feb8 	bl	8000b60 <HAL_GetTick>
 8001df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df6:	f7fe feb3 	bl	8000b60 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d902      	bls.n	8001e0c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	f000 bde2 	b.w	80029d0 <HAL_RCC_OscConfig+0x106c>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4d8>
 8001e36:	4b45      	ldr	r3, [pc, #276]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e013      	b.n	8001e64 <HAL_RCC_OscConfig+0x500>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e60:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2202      	movs	r2, #2
 8001e66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e6e:	fa92 f2a2 	rbit	r2, r2
 8001e72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f042 0220 	orr.w	r2, r2, #32
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f002 021f 	and.w	r2, r2, #31
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0af      	beq.n	8001df6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	21f8      	movs	r1, #248	; 0xf8
 8001eac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001eb4:	fa91 f1a1 	rbit	r1, r1
 8001eb8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ebc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ec0:	fab1 f181 	clz	r1, r1
 8001ec4:	b2c9      	uxtb	r1, r1
 8001ec6:	408b      	lsls	r3, r1
 8001ec8:	4920      	ldr	r1, [pc, #128]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
 8001ece:	e06c      	b.n	8001faa <HAL_RCC_OscConfig+0x646>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ee2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fe30 	bl	8000b60 <HAL_GetTick>
 8001f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f06:	f7fe fe2b 	bl	8000b60 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d902      	bls.n	8001f1c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	f000 bd5a 	b.w	80029d0 <HAL_RCC_OscConfig+0x106c>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d104      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5ec>
 8001f46:	4b01      	ldr	r3, [pc, #4]	; (8001f4c <HAL_RCC_OscConfig+0x5e8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e015      	b.n	8001f78 <HAL_RCC_OscConfig+0x614>
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f62:	2302      	movs	r3, #2
 8001f64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f74:	4bc8      	ldr	r3, [pc, #800]	; (8002298 <HAL_RCC_OscConfig+0x934>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f82:	fa92 f2a2 	rbit	r2, r2
 8001f86:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f8e:	fab2 f282 	clz	r2, r2
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f042 0220 	orr.w	r2, r2, #32
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	f002 021f 	and.w	r2, r2, #31
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ad      	bne.n	8001f06 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8110 	beq.w	80021e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d079      	beq.n	80020c4 <HAL_RCC_OscConfig+0x760>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	4bab      	ldr	r3, [pc, #684]	; (800229c <HAL_RCC_OscConfig+0x938>)
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe fdb1 	bl	8000b60 <HAL_GetTick>
 8001ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7fe fdac 	bl	8000b60 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d902      	bls.n	800201a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	f000 bcdb 	b.w	80029d0 <HAL_RCC_OscConfig+0x106c>
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002034:	2202      	movs	r2, #2
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002058:	2202      	movs	r2, #2
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002072:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002074:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x934>)
 8002076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002080:	2102      	movs	r1, #2
 8002082:	6019      	str	r1, [r3, #0]
 8002084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002088:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	fa93 f1a3 	rbit	r1, r3
 8002092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002096:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800209a:	6019      	str	r1, [r3, #0]
  return result;
 800209c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2101      	movs	r1, #1
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0a0      	beq.n	8002004 <HAL_RCC_OscConfig+0x6a0>
 80020c2:	e08d      	b.n	80021e0 <HAL_RCC_OscConfig+0x87c>
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020cc:	2201      	movs	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	fa93 f2a3 	rbit	r2, r3
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020e6:	601a      	str	r2, [r3, #0]
  return result;
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x938>)
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	461a      	mov	r2, r3
 8002102:	2300      	movs	r3, #0
 8002104:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7fe fd2b 	bl	8000b60 <HAL_GetTick>
 800210a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210e:	e00a      	b.n	8002126 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002110:	f7fe fd26 	bl	8000b60 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d902      	bls.n	8002126 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	f000 bc55 	b.w	80029d0 <HAL_RCC_OscConfig+0x106c>
 8002126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800212e:	2202      	movs	r2, #2
 8002130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002136:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fa93 f2a3 	rbit	r2, r3
 8002140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002144:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002152:	2202      	movs	r2, #2
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	fa93 f2a3 	rbit	r2, r3
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002176:	2202      	movs	r2, #2
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002190:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_OscConfig+0x934>)
 8002194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800219e:	2102      	movs	r1, #2
 80021a0:	6019      	str	r1, [r3, #0]
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	fa93 f1a3 	rbit	r1, r3
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021b8:	6019      	str	r1, [r3, #0]
  return result;
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d197      	bne.n	8002110 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 81a1 	beq.w	8002538 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fc:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCC_OscConfig+0x934>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d116      	bne.n	8002236 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4b23      	ldr	r3, [pc, #140]	; (8002298 <HAL_RCC_OscConfig+0x934>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <HAL_RCC_OscConfig+0x934>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002212:	61d3      	str	r3, [r2, #28]
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_OscConfig+0x934>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800222e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002230:	2301      	movs	r3, #1
 8002232:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_RCC_OscConfig+0x93c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d11a      	bne.n	8002278 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_RCC_OscConfig+0x93c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <HAL_RCC_OscConfig+0x93c>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224e:	f7fe fc87 	bl	8000b60 <HAL_GetTick>
 8002252:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	e009      	b.n	800226c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002258:	f7fe fc82 	bl	8000b60 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b64      	cmp	r3, #100	; 0x64
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e3b1      	b.n	80029d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_RCC_OscConfig+0x93c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ef      	beq.n	8002258 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10d      	bne.n	80022a4 <HAL_RCC_OscConfig+0x940>
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_RCC_OscConfig+0x934>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <HAL_RCC_OscConfig+0x934>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e03c      	b.n	8002310 <HAL_RCC_OscConfig+0x9ac>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	10908120 	.word	0x10908120
 80022a0:	40007000 	.word	0x40007000
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x96a>
 80022b4:	4bc1      	ldr	r3, [pc, #772]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4ac0      	ldr	r2, [pc, #768]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	4bbe      	ldr	r3, [pc, #760]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4abd      	ldr	r2, [pc, #756]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80022c6:	f023 0304 	bic.w	r3, r3, #4
 80022ca:	6213      	str	r3, [r2, #32]
 80022cc:	e020      	b.n	8002310 <HAL_RCC_OscConfig+0x9ac>
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x994>
 80022de:	4bb7      	ldr	r3, [pc, #732]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4ab6      	ldr	r2, [pc, #728]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	4bb4      	ldr	r3, [pc, #720]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4ab3      	ldr	r2, [pc, #716]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0x9ac>
 80022f8:	4bb0      	ldr	r3, [pc, #704]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4aaf      	ldr	r2, [pc, #700]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	6213      	str	r3, [r2, #32]
 8002304:	4bad      	ldr	r3, [pc, #692]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4aac      	ldr	r2, [pc, #688]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 800230a:	f023 0304 	bic.w	r3, r3, #4
 800230e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8081 	beq.w	8002424 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7fe fc1d 	bl	8000b60 <HAL_GetTick>
 8002326:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7fe fc18 	bl	8000b60 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e345      	b.n	80029d0 <HAL_RCC_OscConfig+0x106c>
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800234c:	2202      	movs	r2, #2
 800234e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f2a3 	rbit	r2, r3
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002370:	2202      	movs	r2, #2
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f2a3 	rbit	r2, r3
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800238a:	601a      	str	r2, [r3, #0]
  return result;
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002394:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_OscConfig+0xa4c>
 80023aa:	4b84      	ldr	r3, [pc, #528]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	e013      	b.n	80023d8 <HAL_RCC_OscConfig+0xa74>
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023b8:	2202      	movs	r2, #2
 80023ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	4b79      	ldr	r3, [pc, #484]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023e0:	2102      	movs	r1, #2
 80023e2:	6011      	str	r1, [r2, #0]
 80023e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	fa92 f1a2 	rbit	r1, r2
 80023f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023fa:	6011      	str	r1, [r2, #0]
  return result;
 80023fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002400:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	fab2 f282 	clz	r2, r2
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	f002 021f 	and.w	r2, r2, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f202 	lsl.w	r2, r1, r2
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d084      	beq.n	800232c <HAL_RCC_OscConfig+0x9c8>
 8002422:	e07f      	b.n	8002524 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7fe fb9c 	bl	8000b60 <HAL_GetTick>
 8002428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242c:	e00b      	b.n	8002446 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fb97 	bl	8000b60 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e2c4      	b.n	80029d0 <HAL_RCC_OscConfig+0x106c>
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800244e:	2202      	movs	r2, #2
 8002450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002472:	2202      	movs	r2, #2
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	fa93 f2a3 	rbit	r2, r3
 8002484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002488:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800248c:	601a      	str	r2, [r3, #0]
  return result;
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002496:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d102      	bne.n	80024b2 <HAL_RCC_OscConfig+0xb4e>
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	e013      	b.n	80024da <HAL_RCC_OscConfig+0xb76>
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024ba:	2202      	movs	r2, #2
 80024bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024e2:	2102      	movs	r1, #2
 80024e4:	6011      	str	r1, [r2, #0]
 80024e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	fa92 f1a2 	rbit	r1, r2
 80024f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024fc:	6011      	str	r1, [r2, #0]
  return result;
 80024fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002502:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	fab2 f282 	clz	r2, r2
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f002 021f 	and.w	r2, r2, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d184      	bne.n	800242e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002524:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002528:	2b01      	cmp	r3, #1
 800252a:	d105      	bne.n	8002538 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 8002532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002536:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8242 	beq.w	80029ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_RCC_OscConfig+0xc58>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b08      	cmp	r3, #8
 8002554:	f000 8213 	beq.w	800297e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b02      	cmp	r3, #2
 8002566:	f040 8162 	bne.w	800282e <HAL_RCC_OscConfig+0xeca>
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002572:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fa93 f2a3 	rbit	r2, r3
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800258e:	601a      	str	r2, [r3, #0]
  return result;
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002598:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	461a      	mov	r2, r3
 80025ac:	2300      	movs	r3, #0
 80025ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fad6 	bl	8000b60 <HAL_GetTick>
 80025b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b8:	e00c      	b.n	80025d4 <HAL_RCC_OscConfig+0xc70>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe face 	bl	8000b60 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1fd      	b.n	80029d0 <HAL_RCC_OscConfig+0x106c>
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fa93 f2a3 	rbit	r2, r3
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025f8:	601a      	str	r2, [r3, #0]
  return result;
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002602:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <HAL_RCC_OscConfig+0xcba>
 8002618:	4bb0      	ldr	r3, [pc, #704]	; (80028dc <HAL_RCC_OscConfig+0xf78>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	e027      	b.n	800266e <HAL_RCC_OscConfig+0xd0a>
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800264c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	4b9c      	ldr	r3, [pc, #624]	; (80028dc <HAL_RCC_OscConfig+0xf78>)
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002672:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002676:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800267a:	6011      	str	r1, [r2, #0]
 800267c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002680:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	fa92 f1a2 	rbit	r1, r2
 800268a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800268e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002692:	6011      	str	r1, [r2, #0]
  return result;
 8002694:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002698:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d182      	bne.n	80025c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ba:	4b88      	ldr	r3, [pc, #544]	; (80028dc <HAL_RCC_OscConfig+0xf78>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	430b      	orrs	r3, r1
 80026dc:	497f      	ldr	r1, [pc, #508]	; (80028dc <HAL_RCC_OscConfig+0xf78>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002706:	601a      	str	r2, [r3, #0]
  return result;
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002710:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800271c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	461a      	mov	r2, r3
 8002724:	2301      	movs	r3, #1
 8002726:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fa1a 	bl	8000b60 <HAL_GetTick>
 800272c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002730:	e009      	b.n	8002746 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe fa15 	bl	8000b60 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e144      	b.n	80029d0 <HAL_RCC_OscConfig+0x106c>
 8002746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800274e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800276a:	601a      	str	r2, [r3, #0]
  return result;
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002774:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0xe2c>
 800278a:	4b54      	ldr	r3, [pc, #336]	; (80028dc <HAL_RCC_OscConfig+0xf78>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e027      	b.n	80027e0 <HAL_RCC_OscConfig+0xe7c>
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	fa93 f2a3 	rbit	r2, r3
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_OscConfig+0xf78>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027ec:	6011      	str	r1, [r2, #0]
 80027ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	fa92 f1a2 	rbit	r1, r2
 80027fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002800:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002804:	6011      	str	r1, [r2, #0]
  return result;
 8002806:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800280a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	fab2 f282 	clz	r2, r2
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f042 0220 	orr.w	r2, r2, #32
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f002 021f 	and.w	r2, r2, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f202 	lsl.w	r2, r1, r2
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d082      	beq.n	8002732 <HAL_RCC_OscConfig+0xdce>
 800282c:	e0cf      	b.n	80029ce <HAL_RCC_OscConfig+0x106a>
 800282e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002832:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002836:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800283a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002852:	601a      	str	r2, [r3, #0]
  return result;
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800285c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002868:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	461a      	mov	r2, r3
 8002870:	2300      	movs	r3, #0
 8002872:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe f974 	bl	8000b60 <HAL_GetTick>
 8002878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	e009      	b.n	8002892 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe f96f 	bl	8000b60 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e09e      	b.n	80029d0 <HAL_RCC_OscConfig+0x106c>
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800289a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	fa93 f2a3 	rbit	r2, r3
 80028ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028b6:	601a      	str	r2, [r3, #0]
  return result;
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d104      	bne.n	80028e0 <HAL_RCC_OscConfig+0xf7c>
 80028d6:	4b01      	ldr	r3, [pc, #4]	; (80028dc <HAL_RCC_OscConfig+0xf78>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e029      	b.n	8002930 <HAL_RCC_OscConfig+0xfcc>
 80028dc:	40021000 	.word	0x40021000
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800290e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	fa93 f2a3 	rbit	r2, r3
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_RCC_OscConfig+0x1078>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002934:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002938:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800293c:	6011      	str	r1, [r2, #0]
 800293e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002942:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	fa92 f1a2 	rbit	r1, r2
 800294c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002950:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002954:	6011      	str	r1, [r2, #0]
  return result;
 8002956:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800295a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	fab2 f282 	clz	r2, r2
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f042 0220 	orr.w	r2, r2, #32
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f002 021f 	and.w	r2, r2, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f202 	lsl.w	r2, r1, r2
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d180      	bne.n	800287e <HAL_RCC_OscConfig+0xf1a>
 800297c:	e027      	b.n	80029ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e01e      	b.n	80029d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_RCC_OscConfig+0x1078>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800299a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800299e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d10b      	bne.n	80029ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b09e      	sub	sp, #120	; 0x78
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e162      	b.n	8002cbe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b90      	ldr	r3, [pc, #576]	; (8002c3c <HAL_RCC_ClockConfig+0x25c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d910      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b8d      	ldr	r3, [pc, #564]	; (8002c3c <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0207 	bic.w	r2, r3, #7
 8002a0e:	498b      	ldr	r1, [pc, #556]	; (8002c3c <HAL_RCC_ClockConfig+0x25c>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b89      	ldr	r3, [pc, #548]	; (8002c3c <HAL_RCC_ClockConfig+0x25c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e14a      	b.n	8002cbe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b82      	ldr	r3, [pc, #520]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	497f      	ldr	r1, [pc, #508]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80dc 	beq.w	8002c0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d13c      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xf6>
 8002a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d102      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xa6>
 8002a80:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	e00f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0xc6>
 8002a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	667b      	str	r3, [r7, #100]	; 0x64
 8002a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a98:	663b      	str	r3, [r7, #96]	; 0x60
 8002a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aa2:	4b67      	ldr	r3, [pc, #412]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aaa:	65ba      	str	r2, [r7, #88]	; 0x58
 8002aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aae:	fa92 f2a2 	rbit	r2, r2
 8002ab2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ab6:	fab2 f282 	clz	r2, r2
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	f042 0220 	orr.w	r2, r2, #32
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	f002 021f 	and.w	r2, r2, #31
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d17b      	bne.n	8002bca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0f3      	b.n	8002cbe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d13c      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x178>
 8002ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x128>
 8002b02:	4b4f      	ldr	r3, [pc, #316]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	e00f      	b.n	8002b28 <HAL_RCC_ClockConfig+0x148>
 8002b08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	647b      	str	r3, [r7, #68]	; 0x44
 8002b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b24:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b30:	fa92 f2a2 	rbit	r2, r2
 8002b34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b38:	fab2 f282 	clz	r2, r2
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f042 0220 	orr.w	r2, r2, #32
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f002 021f 	and.w	r2, r2, #31
 8002b48:	2101      	movs	r1, #1
 8002b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d13a      	bne.n	8002bca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b2      	b.n	8002cbe <HAL_RCC_ClockConfig+0x2de>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d102      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x1a0>
 8002b7a:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	e00d      	b.n	8002b9c <HAL_RCC_ClockConfig+0x1bc>
 8002b80:	2302      	movs	r3, #2
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	623b      	str	r3, [r7, #32]
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	61ba      	str	r2, [r7, #24]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	fa92 f2a2 	rbit	r2, r2
 8002ba6:	617a      	str	r2, [r7, #20]
  return result;
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e079      	b.n	8002cbe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	491a      	ldr	r1, [pc, #104]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bdc:	f7fd ffc0 	bl	8000b60 <HAL_GetTick>
 8002be0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7fd ffbc 	bl	8000b60 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e061      	b.n	8002cbe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 020c 	and.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1eb      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_ClockConfig+0x25c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d214      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_RCC_ClockConfig+0x25c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 0207 	bic.w	r2, r3, #7
 8002c22:	4906      	ldr	r1, [pc, #24]	; (8002c3c <HAL_RCC_ClockConfig+0x25c>)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <HAL_RCC_ClockConfig+0x25c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e040      	b.n	8002cbe <HAL_RCC_ClockConfig+0x2de>
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	491a      	ldr	r1, [pc, #104]	; (8002cc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4912      	ldr	r1, [pc, #72]	; (8002cc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c82:	f000 f829 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c86:	4601      	mov	r1, r0
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c90:	22f0      	movs	r2, #240	; 0xf0
 8002c92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	fa92 f2a2 	rbit	r2, r2
 8002c9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	fab2 f282 	clz	r2, r2
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	40d3      	lsrs	r3, r2
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x2ec>)
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	fa21 f303 	lsr.w	r3, r1, r3
 8002cae:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <HAL_RCC_ClockConfig+0x2f0>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_RCC_ClockConfig+0x2f4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd ff0e 	bl	8000ad8 <HAL_InitTick>
  
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3778      	adds	r7, #120	; 0x78
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	080044d0 	.word	0x080044d0
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b08b      	sub	sp, #44	; 0x2c
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cf2:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x30>
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x36>
 8002d06:	e03c      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d08:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d0a:	623b      	str	r3, [r7, #32]
      break;
 8002d0c:	e03c      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	fa92 f2a2 	rbit	r2, r2
 8002d20:	607a      	str	r2, [r7, #4]
  return result;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	fab2 f282 	clz	r2, r2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	40d3      	lsrs	r3, r2
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	220f      	movs	r2, #15
 8002d3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	fa92 f2a2 	rbit	r2, r2
 8002d44:	60fa      	str	r2, [r7, #12]
  return result;
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	fab2 f282 	clz	r2, r2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	40d3      	lsrs	r3, r2
 8002d50:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d52:	5cd3      	ldrb	r3, [r2, r3]
 8002d54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d60:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	e004      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	623b      	str	r3, [r7, #32]
      break;
 8002d80:	e002      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d84:	623b      	str	r3, [r7, #32]
      break;
 8002d86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	372c      	adds	r7, #44	; 0x2c
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	007a1200 	.word	0x007a1200
 8002da0:	080044e8 	.word	0x080044e8
 8002da4:	080044f8 	.word	0x080044f8
 8002da8:	003d0900 	.word	0x003d0900

08002dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000000 	.word	0x20000000

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002dca:	f7ff ffef 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dce:	4601      	mov	r1, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ddc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	fa92 f2a2 	rbit	r2, r2
 8002de4:	603a      	str	r2, [r7, #0]
  return result;
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	fab2 f282 	clz	r2, r2
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	40d3      	lsrs	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	080044e0 	.word	0x080044e0

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e0e:	f7ff ffcd 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002e12:	4601      	mov	r1, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	fa92 f2a2 	rbit	r2, r2
 8002e28:	603a      	str	r2, [r7, #0]
  return result;
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	fab2 f282 	clz	r2, r2
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	40d3      	lsrs	r3, r2
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	080044e0 	.word	0x080044e0

08002e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b092      	sub	sp, #72	; 0x48
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80d4 	beq.w	8003018 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e70:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10e      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7c:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	4a4a      	ldr	r2, [pc, #296]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	61d3      	str	r3, [r2, #28]
 8002e88:	4b48      	ldr	r3, [pc, #288]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b45      	ldr	r3, [pc, #276]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d118      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	4b42      	ldr	r3, [pc, #264]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a41      	ldr	r2, [pc, #260]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7fd fe55 	bl	8000b60 <HAL_GetTick>
 8002eb6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7fd fe51 	bl	8000b60 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b64      	cmp	r3, #100	; 0x64
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e169      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b38      	ldr	r3, [pc, #224]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8084 	beq.w	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d07c      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	461a      	mov	r2, r3
 8002f22:	2301      	movs	r3, #1
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	461a      	mov	r2, r3
 8002f46:	2300      	movs	r3, #0
 8002f48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d04b      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fd fe01 	bl	8000b60 <HAL_GetTick>
 8002f5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fd fdfd 	bl	8000b60 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e113      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	2302      	movs	r3, #2
 8002f86:	623b      	str	r3, [r7, #32]
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	61fb      	str	r3, [r7, #28]
  return result;
 8002f90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d108      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002fa6:	4b01      	ldr	r3, [pc, #4]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	e00d      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	10908100 	.word	0x10908100
 8002fb8:	2302      	movs	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	4b78      	ldr	r3, [pc, #480]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	2202      	movs	r2, #2
 8002fca:	613a      	str	r2, [r7, #16]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	fa92 f2a2 	rbit	r2, r2
 8002fd2:	60fa      	str	r2, [r7, #12]
  return result;
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	fab2 f282 	clz	r2, r2
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	f002 021f 	and.w	r2, r2, #31
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0b7      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ff2:	4b6d      	ldr	r3, [pc, #436]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	496a      	ldr	r1, [pc, #424]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003000:	4313      	orrs	r3, r2
 8003002:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003004:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300c:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a65      	ldr	r2, [pc, #404]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003016:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003024:	4b60      	ldr	r3, [pc, #384]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f023 0203 	bic.w	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	495d      	ldr	r1, [pc, #372]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003032:	4313      	orrs	r3, r2
 8003034:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003042:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4956      	ldr	r1, [pc, #344]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003050:	4313      	orrs	r3, r2
 8003052:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003060:	4b51      	ldr	r3, [pc, #324]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	494e      	ldr	r1, [pc, #312]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800306e:	4313      	orrs	r3, r2
 8003070:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f023 0210 	bic.w	r2, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	4947      	ldr	r1, [pc, #284]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800308c:	4313      	orrs	r3, r2
 800308e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800309c:	4b42      	ldr	r3, [pc, #264]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	493f      	ldr	r1, [pc, #252]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030ba:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f023 0220 	bic.w	r2, r3, #32
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4938      	ldr	r1, [pc, #224]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030d8:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	4930      	ldr	r1, [pc, #192]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	4929      	ldr	r1, [pc, #164]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003104:	4313      	orrs	r3, r2
 8003106:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	4921      	ldr	r1, [pc, #132]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	491a      	ldr	r1, [pc, #104]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003140:	4313      	orrs	r3, r2
 8003142:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003150:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	4912      	ldr	r1, [pc, #72]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800315e:	4313      	orrs	r3, r2
 8003160:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	490b      	ldr	r1, [pc, #44]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	4903      	ldr	r1, [pc, #12]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3748      	adds	r7, #72	; 0x48
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000

080031ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e09d      	b.n	80032fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ce:	d009      	beq.n	80031e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
 80031d6:	e005      	b.n	80031e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd faee 	bl	80007e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003224:	d902      	bls.n	800322c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e002      	b.n	8003232 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800322c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003230:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800323a:	d007      	beq.n	800324c <HAL_SPI_Init+0xa0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003244:	d002      	beq.n	800324c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	ea42 0103 	orr.w	r1, r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	0c1b      	lsrs	r3, r3, #16
 80032a8:	f003 0204 	and.w	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032c8:	ea42 0103 	orr.w	r1, r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	460b      	mov	r3, r1
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e059      	b.n	80033ce <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7fd fa9a 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2224      	movs	r2, #36	; 0x24
 8003334:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f846 	bl	80033d8 <UART_SetConfig>
 800334c:	4603      	mov	r3, r0
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_MultiProcessor_Init+0x54>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e03b      	b.n	80033ce <HAL_MultiProcessor_Init+0xcc>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_MultiProcessor_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fa10 	bl	8003784 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003382:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338a:	d10a      	bne.n	80033a2 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8003396:	7afb      	ldrb	r3, [r7, #11]
 8003398:	061a      	lsls	r2, r3, #24
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fa7e 	bl	80038c8 <UART_CheckIdleState>
 80033cc:	4603      	mov	r3, r0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003406:	f023 030c 	bic.w	r3, r3, #12
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	6979      	ldr	r1, [r7, #20]
 8003410:	430b      	orrs	r3, r1
 8003412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4aa8      	ldr	r2, [pc, #672]	; (80036f4 <UART_SetConfig+0x31c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d120      	bne.n	800349a <UART_SetConfig+0xc2>
 8003458:	4ba7      	ldr	r3, [pc, #668]	; (80036f8 <UART_SetConfig+0x320>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b03      	cmp	r3, #3
 8003462:	d817      	bhi.n	8003494 <UART_SetConfig+0xbc>
 8003464:	a201      	add	r2, pc, #4	; (adr r2, 800346c <UART_SetConfig+0x94>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	0800347d 	.word	0x0800347d
 8003470:	08003489 	.word	0x08003489
 8003474:	0800348f 	.word	0x0800348f
 8003478:	08003483 	.word	0x08003483
 800347c:	2301      	movs	r3, #1
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	e0b5      	b.n	80035ee <UART_SetConfig+0x216>
 8003482:	2302      	movs	r3, #2
 8003484:	77fb      	strb	r3, [r7, #31]
 8003486:	e0b2      	b.n	80035ee <UART_SetConfig+0x216>
 8003488:	2304      	movs	r3, #4
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e0af      	b.n	80035ee <UART_SetConfig+0x216>
 800348e:	2308      	movs	r3, #8
 8003490:	77fb      	strb	r3, [r7, #31]
 8003492:	e0ac      	b.n	80035ee <UART_SetConfig+0x216>
 8003494:	2310      	movs	r3, #16
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e0a9      	b.n	80035ee <UART_SetConfig+0x216>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a97      	ldr	r2, [pc, #604]	; (80036fc <UART_SetConfig+0x324>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d124      	bne.n	80034ee <UART_SetConfig+0x116>
 80034a4:	4b94      	ldr	r3, [pc, #592]	; (80036f8 <UART_SetConfig+0x320>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034b0:	d011      	beq.n	80034d6 <UART_SetConfig+0xfe>
 80034b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034b6:	d817      	bhi.n	80034e8 <UART_SetConfig+0x110>
 80034b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034bc:	d011      	beq.n	80034e2 <UART_SetConfig+0x10a>
 80034be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c2:	d811      	bhi.n	80034e8 <UART_SetConfig+0x110>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <UART_SetConfig+0xf8>
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d006      	beq.n	80034dc <UART_SetConfig+0x104>
 80034ce:	e00b      	b.n	80034e8 <UART_SetConfig+0x110>
 80034d0:	2300      	movs	r3, #0
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e08b      	b.n	80035ee <UART_SetConfig+0x216>
 80034d6:	2302      	movs	r3, #2
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e088      	b.n	80035ee <UART_SetConfig+0x216>
 80034dc:	2304      	movs	r3, #4
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e085      	b.n	80035ee <UART_SetConfig+0x216>
 80034e2:	2308      	movs	r3, #8
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e082      	b.n	80035ee <UART_SetConfig+0x216>
 80034e8:	2310      	movs	r3, #16
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e07f      	b.n	80035ee <UART_SetConfig+0x216>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a83      	ldr	r2, [pc, #524]	; (8003700 <UART_SetConfig+0x328>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d124      	bne.n	8003542 <UART_SetConfig+0x16a>
 80034f8:	4b7f      	ldr	r3, [pc, #508]	; (80036f8 <UART_SetConfig+0x320>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003500:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003504:	d011      	beq.n	800352a <UART_SetConfig+0x152>
 8003506:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800350a:	d817      	bhi.n	800353c <UART_SetConfig+0x164>
 800350c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003510:	d011      	beq.n	8003536 <UART_SetConfig+0x15e>
 8003512:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003516:	d811      	bhi.n	800353c <UART_SetConfig+0x164>
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <UART_SetConfig+0x14c>
 800351c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003520:	d006      	beq.n	8003530 <UART_SetConfig+0x158>
 8003522:	e00b      	b.n	800353c <UART_SetConfig+0x164>
 8003524:	2300      	movs	r3, #0
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	e061      	b.n	80035ee <UART_SetConfig+0x216>
 800352a:	2302      	movs	r3, #2
 800352c:	77fb      	strb	r3, [r7, #31]
 800352e:	e05e      	b.n	80035ee <UART_SetConfig+0x216>
 8003530:	2304      	movs	r3, #4
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e05b      	b.n	80035ee <UART_SetConfig+0x216>
 8003536:	2308      	movs	r3, #8
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e058      	b.n	80035ee <UART_SetConfig+0x216>
 800353c:	2310      	movs	r3, #16
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e055      	b.n	80035ee <UART_SetConfig+0x216>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6f      	ldr	r2, [pc, #444]	; (8003704 <UART_SetConfig+0x32c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d124      	bne.n	8003596 <UART_SetConfig+0x1be>
 800354c:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <UART_SetConfig+0x320>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003558:	d011      	beq.n	800357e <UART_SetConfig+0x1a6>
 800355a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800355e:	d817      	bhi.n	8003590 <UART_SetConfig+0x1b8>
 8003560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003564:	d011      	beq.n	800358a <UART_SetConfig+0x1b2>
 8003566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800356a:	d811      	bhi.n	8003590 <UART_SetConfig+0x1b8>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <UART_SetConfig+0x1a0>
 8003570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003574:	d006      	beq.n	8003584 <UART_SetConfig+0x1ac>
 8003576:	e00b      	b.n	8003590 <UART_SetConfig+0x1b8>
 8003578:	2300      	movs	r3, #0
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e037      	b.n	80035ee <UART_SetConfig+0x216>
 800357e:	2302      	movs	r3, #2
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e034      	b.n	80035ee <UART_SetConfig+0x216>
 8003584:	2304      	movs	r3, #4
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e031      	b.n	80035ee <UART_SetConfig+0x216>
 800358a:	2308      	movs	r3, #8
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e02e      	b.n	80035ee <UART_SetConfig+0x216>
 8003590:	2310      	movs	r3, #16
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e02b      	b.n	80035ee <UART_SetConfig+0x216>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <UART_SetConfig+0x330>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d124      	bne.n	80035ea <UART_SetConfig+0x212>
 80035a0:	4b55      	ldr	r3, [pc, #340]	; (80036f8 <UART_SetConfig+0x320>)
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80035a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035ac:	d011      	beq.n	80035d2 <UART_SetConfig+0x1fa>
 80035ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035b2:	d817      	bhi.n	80035e4 <UART_SetConfig+0x20c>
 80035b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b8:	d011      	beq.n	80035de <UART_SetConfig+0x206>
 80035ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035be:	d811      	bhi.n	80035e4 <UART_SetConfig+0x20c>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <UART_SetConfig+0x1f4>
 80035c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c8:	d006      	beq.n	80035d8 <UART_SetConfig+0x200>
 80035ca:	e00b      	b.n	80035e4 <UART_SetConfig+0x20c>
 80035cc:	2300      	movs	r3, #0
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e00d      	b.n	80035ee <UART_SetConfig+0x216>
 80035d2:	2302      	movs	r3, #2
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	e00a      	b.n	80035ee <UART_SetConfig+0x216>
 80035d8:	2304      	movs	r3, #4
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e007      	b.n	80035ee <UART_SetConfig+0x216>
 80035de:	2308      	movs	r3, #8
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e004      	b.n	80035ee <UART_SetConfig+0x216>
 80035e4:	2310      	movs	r3, #16
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e001      	b.n	80035ee <UART_SetConfig+0x216>
 80035ea:	2310      	movs	r3, #16
 80035ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f6:	d15c      	bne.n	80036b2 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80035f8:	7ffb      	ldrb	r3, [r7, #31]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d827      	bhi.n	800364e <UART_SetConfig+0x276>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <UART_SetConfig+0x22c>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003629 	.word	0x08003629
 8003608:	08003631 	.word	0x08003631
 800360c:	08003639 	.word	0x08003639
 8003610:	0800364f 	.word	0x0800364f
 8003614:	0800363f 	.word	0x0800363f
 8003618:	0800364f 	.word	0x0800364f
 800361c:	0800364f 	.word	0x0800364f
 8003620:	0800364f 	.word	0x0800364f
 8003624:	08003647 	.word	0x08003647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003628:	f7ff fbcc 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 800362c:	61b8      	str	r0, [r7, #24]
        break;
 800362e:	e013      	b.n	8003658 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003630:	f7ff fbea 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 8003634:	61b8      	str	r0, [r7, #24]
        break;
 8003636:	e00f      	b.n	8003658 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003638:	4b34      	ldr	r3, [pc, #208]	; (800370c <UART_SetConfig+0x334>)
 800363a:	61bb      	str	r3, [r7, #24]
        break;
 800363c:	e00c      	b.n	8003658 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363e:	f7ff fb4b 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8003642:	61b8      	str	r0, [r7, #24]
        break;
 8003644:	e008      	b.n	8003658 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364a:	61bb      	str	r3, [r7, #24]
        break;
 800364c:	e004      	b.n	8003658 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	77bb      	strb	r3, [r7, #30]
        break;
 8003656:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8084 	beq.w	8003768 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	005a      	lsls	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	441a      	add	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	b29b      	uxth	r3, r3
 8003676:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	d916      	bls.n	80036ac <UART_SetConfig+0x2d4>
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d212      	bcs.n	80036ac <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f023 030f 	bic.w	r3, r3, #15
 800368e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	b29b      	uxth	r3, r3
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	b29a      	uxth	r2, r3
 800369c:	89fb      	ldrh	r3, [r7, #14]
 800369e:	4313      	orrs	r3, r2
 80036a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	89fa      	ldrh	r2, [r7, #14]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	e05d      	b.n	8003768 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	77bb      	strb	r3, [r7, #30]
 80036b0:	e05a      	b.n	8003768 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d836      	bhi.n	8003726 <UART_SetConfig+0x34e>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0x2e8>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036e5 	.word	0x080036e5
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	08003711 	.word	0x08003711
 80036cc:	08003727 	.word	0x08003727
 80036d0:	08003717 	.word	0x08003717
 80036d4:	08003727 	.word	0x08003727
 80036d8:	08003727 	.word	0x08003727
 80036dc:	08003727 	.word	0x08003727
 80036e0:	0800371f 	.word	0x0800371f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e4:	f7ff fb6e 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 80036e8:	61b8      	str	r0, [r7, #24]
        break;
 80036ea:	e021      	b.n	8003730 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7ff fb8c 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 80036f0:	61b8      	str	r0, [r7, #24]
        break;
 80036f2:	e01d      	b.n	8003730 <UART_SetConfig+0x358>
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40004400 	.word	0x40004400
 8003700:	40004800 	.word	0x40004800
 8003704:	40004c00 	.word	0x40004c00
 8003708:	40005000 	.word	0x40005000
 800370c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <UART_SetConfig+0x3a8>)
 8003712:	61bb      	str	r3, [r7, #24]
        break;
 8003714:	e00c      	b.n	8003730 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003716:	f7ff fadf 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 800371a:	61b8      	str	r0, [r7, #24]
        break;
 800371c:	e008      	b.n	8003730 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800371e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003722:	61bb      	str	r3, [r7, #24]
        break;
 8003724:	e004      	b.n	8003730 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	77bb      	strb	r3, [r7, #30]
        break;
 800372e:	bf00      	nop
    }

    if (pclk != 0U)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d018      	beq.n	8003768 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	085a      	lsrs	r2, r3, #1
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	441a      	add	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	b29b      	uxth	r3, r3
 800374a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b0f      	cmp	r3, #15
 8003750:	d908      	bls.n	8003764 <UART_SetConfig+0x38c>
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003758:	d204      	bcs.n	8003764 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	e001      	b.n	8003768 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003774:	7fbb      	ldrb	r3, [r7, #30]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	007a1200 	.word	0x007a1200

08003784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01a      	beq.n	800389a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003882:	d10a      	bne.n	800389a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	605a      	str	r2, [r3, #4]
  }
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038d8:	f7fd f942 	bl	8000b60 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d10e      	bne.n	800390a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f82d 	bl	800395a <UART_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e023      	b.n	8003952 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b04      	cmp	r3, #4
 8003916:	d10e      	bne.n	8003936 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f817 	bl	800395a <UART_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e00d      	b.n	8003952 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b09c      	sub	sp, #112	; 0x70
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	4613      	mov	r3, r2
 8003968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396a:	e0a5      	b.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003972:	f000 80a1 	beq.w	8003ab8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003976:	f7fd f8f3 	bl	8000b60 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <UART_WaitOnFlagUntilTimeout+0x32>
 8003986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003988:	2b00      	cmp	r3, #0
 800398a:	d13e      	bne.n	8003a0a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800399a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039a0:	667b      	str	r3, [r7, #100]	; 0x64
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e6      	bne.n	800398c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3308      	adds	r3, #8
 80039c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	663b      	str	r3, [r7, #96]	; 0x60
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3308      	adds	r3, #8
 80039dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039de:	64ba      	str	r2, [r7, #72]	; 0x48
 80039e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e5      	bne.n	80039be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e067      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d04f      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a26:	d147      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
 8003a52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e6      	bne.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	613b      	str	r3, [r7, #16]
   return(result);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a84:	623a      	str	r2, [r7, #32]
 8003a86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	69f9      	ldr	r1, [r7, #28]
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e010      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	f43f af4a 	beq.w	800396c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3770      	adds	r7, #112	; 0x70
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003aea:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003aee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4013      	ands	r3, r2
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b18:	b084      	sub	sp, #16
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	f107 0014 	add.w	r0, r7, #20
 8003b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	b004      	add	sp, #16
 8003b58:	4770      	bx	lr
	...

08003b5c <__errno>:
 8003b5c:	4b01      	ldr	r3, [pc, #4]	; (8003b64 <__errno+0x8>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c

08003b68 <__libc_init_array>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4d0d      	ldr	r5, [pc, #52]	; (8003ba0 <__libc_init_array+0x38>)
 8003b6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ba4 <__libc_init_array+0x3c>)
 8003b6e:	1b64      	subs	r4, r4, r5
 8003b70:	10a4      	asrs	r4, r4, #2
 8003b72:	2600      	movs	r6, #0
 8003b74:	42a6      	cmp	r6, r4
 8003b76:	d109      	bne.n	8003b8c <__libc_init_array+0x24>
 8003b78:	4d0b      	ldr	r5, [pc, #44]	; (8003ba8 <__libc_init_array+0x40>)
 8003b7a:	4c0c      	ldr	r4, [pc, #48]	; (8003bac <__libc_init_array+0x44>)
 8003b7c:	f000 fc8e 	bl	800449c <_init>
 8003b80:	1b64      	subs	r4, r4, r5
 8003b82:	10a4      	asrs	r4, r4, #2
 8003b84:	2600      	movs	r6, #0
 8003b86:	42a6      	cmp	r6, r4
 8003b88:	d105      	bne.n	8003b96 <__libc_init_array+0x2e>
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b90:	4798      	blx	r3
 8003b92:	3601      	adds	r6, #1
 8003b94:	e7ee      	b.n	8003b74 <__libc_init_array+0xc>
 8003b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9a:	4798      	blx	r3
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	e7f2      	b.n	8003b86 <__libc_init_array+0x1e>
 8003ba0:	0800453c 	.word	0x0800453c
 8003ba4:	0800453c 	.word	0x0800453c
 8003ba8:	0800453c 	.word	0x0800453c
 8003bac:	08004540 	.word	0x08004540

08003bb0 <memset>:
 8003bb0:	4402      	add	r2, r0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d100      	bne.n	8003bba <memset+0xa>
 8003bb8:	4770      	bx	lr
 8003bba:	f803 1b01 	strb.w	r1, [r3], #1
 8003bbe:	e7f9      	b.n	8003bb4 <memset+0x4>

08003bc0 <siprintf>:
 8003bc0:	b40e      	push	{r1, r2, r3}
 8003bc2:	b500      	push	{lr}
 8003bc4:	b09c      	sub	sp, #112	; 0x70
 8003bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bc8:	9002      	str	r0, [sp, #8]
 8003bca:	9006      	str	r0, [sp, #24]
 8003bcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bd0:	4809      	ldr	r0, [pc, #36]	; (8003bf8 <siprintf+0x38>)
 8003bd2:	9107      	str	r1, [sp, #28]
 8003bd4:	9104      	str	r1, [sp, #16]
 8003bd6:	4909      	ldr	r1, [pc, #36]	; (8003bfc <siprintf+0x3c>)
 8003bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bdc:	9105      	str	r1, [sp, #20]
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	a902      	add	r1, sp, #8
 8003be4:	f000 f868 	bl	8003cb8 <_svfiprintf_r>
 8003be8:	9b02      	ldr	r3, [sp, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	b01c      	add	sp, #112	; 0x70
 8003bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bf4:	b003      	add	sp, #12
 8003bf6:	4770      	bx	lr
 8003bf8:	2000000c 	.word	0x2000000c
 8003bfc:	ffff0208 	.word	0xffff0208

08003c00 <__ssputs_r>:
 8003c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c04:	688e      	ldr	r6, [r1, #8]
 8003c06:	429e      	cmp	r6, r3
 8003c08:	4682      	mov	sl, r0
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	4690      	mov	r8, r2
 8003c0e:	461f      	mov	r7, r3
 8003c10:	d838      	bhi.n	8003c84 <__ssputs_r+0x84>
 8003c12:	898a      	ldrh	r2, [r1, #12]
 8003c14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c18:	d032      	beq.n	8003c80 <__ssputs_r+0x80>
 8003c1a:	6825      	ldr	r5, [r4, #0]
 8003c1c:	6909      	ldr	r1, [r1, #16]
 8003c1e:	eba5 0901 	sub.w	r9, r5, r1
 8003c22:	6965      	ldr	r5, [r4, #20]
 8003c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	444b      	add	r3, r9
 8003c30:	106d      	asrs	r5, r5, #1
 8003c32:	429d      	cmp	r5, r3
 8003c34:	bf38      	it	cc
 8003c36:	461d      	movcc	r5, r3
 8003c38:	0553      	lsls	r3, r2, #21
 8003c3a:	d531      	bpl.n	8003ca0 <__ssputs_r+0xa0>
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	f000 fb63 	bl	8004308 <_malloc_r>
 8003c42:	4606      	mov	r6, r0
 8003c44:	b950      	cbnz	r0, 8003c5c <__ssputs_r+0x5c>
 8003c46:	230c      	movs	r3, #12
 8003c48:	f8ca 3000 	str.w	r3, [sl]
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c52:	81a3      	strh	r3, [r4, #12]
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c5c:	6921      	ldr	r1, [r4, #16]
 8003c5e:	464a      	mov	r2, r9
 8003c60:	f000 fabe 	bl	80041e0 <memcpy>
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6e:	81a3      	strh	r3, [r4, #12]
 8003c70:	6126      	str	r6, [r4, #16]
 8003c72:	6165      	str	r5, [r4, #20]
 8003c74:	444e      	add	r6, r9
 8003c76:	eba5 0509 	sub.w	r5, r5, r9
 8003c7a:	6026      	str	r6, [r4, #0]
 8003c7c:	60a5      	str	r5, [r4, #8]
 8003c7e:	463e      	mov	r6, r7
 8003c80:	42be      	cmp	r6, r7
 8003c82:	d900      	bls.n	8003c86 <__ssputs_r+0x86>
 8003c84:	463e      	mov	r6, r7
 8003c86:	6820      	ldr	r0, [r4, #0]
 8003c88:	4632      	mov	r2, r6
 8003c8a:	4641      	mov	r1, r8
 8003c8c:	f000 fab6 	bl	80041fc <memmove>
 8003c90:	68a3      	ldr	r3, [r4, #8]
 8003c92:	1b9b      	subs	r3, r3, r6
 8003c94:	60a3      	str	r3, [r4, #8]
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	4433      	add	r3, r6
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	e7db      	b.n	8003c58 <__ssputs_r+0x58>
 8003ca0:	462a      	mov	r2, r5
 8003ca2:	f000 fba5 	bl	80043f0 <_realloc_r>
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d1e1      	bne.n	8003c70 <__ssputs_r+0x70>
 8003cac:	6921      	ldr	r1, [r4, #16]
 8003cae:	4650      	mov	r0, sl
 8003cb0:	f000 fabe 	bl	8004230 <_free_r>
 8003cb4:	e7c7      	b.n	8003c46 <__ssputs_r+0x46>
	...

08003cb8 <_svfiprintf_r>:
 8003cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cbc:	4698      	mov	r8, r3
 8003cbe:	898b      	ldrh	r3, [r1, #12]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	b09d      	sub	sp, #116	; 0x74
 8003cc4:	4607      	mov	r7, r0
 8003cc6:	460d      	mov	r5, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	d50e      	bpl.n	8003cea <_svfiprintf_r+0x32>
 8003ccc:	690b      	ldr	r3, [r1, #16]
 8003cce:	b963      	cbnz	r3, 8003cea <_svfiprintf_r+0x32>
 8003cd0:	2140      	movs	r1, #64	; 0x40
 8003cd2:	f000 fb19 	bl	8004308 <_malloc_r>
 8003cd6:	6028      	str	r0, [r5, #0]
 8003cd8:	6128      	str	r0, [r5, #16]
 8003cda:	b920      	cbnz	r0, 8003ce6 <_svfiprintf_r+0x2e>
 8003cdc:	230c      	movs	r3, #12
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ce4:	e0d1      	b.n	8003e8a <_svfiprintf_r+0x1d2>
 8003ce6:	2340      	movs	r3, #64	; 0x40
 8003ce8:	616b      	str	r3, [r5, #20]
 8003cea:	2300      	movs	r3, #0
 8003cec:	9309      	str	r3, [sp, #36]	; 0x24
 8003cee:	2320      	movs	r3, #32
 8003cf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cf8:	2330      	movs	r3, #48	; 0x30
 8003cfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ea4 <_svfiprintf_r+0x1ec>
 8003cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d02:	f04f 0901 	mov.w	r9, #1
 8003d06:	4623      	mov	r3, r4
 8003d08:	469a      	mov	sl, r3
 8003d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d0e:	b10a      	cbz	r2, 8003d14 <_svfiprintf_r+0x5c>
 8003d10:	2a25      	cmp	r2, #37	; 0x25
 8003d12:	d1f9      	bne.n	8003d08 <_svfiprintf_r+0x50>
 8003d14:	ebba 0b04 	subs.w	fp, sl, r4
 8003d18:	d00b      	beq.n	8003d32 <_svfiprintf_r+0x7a>
 8003d1a:	465b      	mov	r3, fp
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	4629      	mov	r1, r5
 8003d20:	4638      	mov	r0, r7
 8003d22:	f7ff ff6d 	bl	8003c00 <__ssputs_r>
 8003d26:	3001      	adds	r0, #1
 8003d28:	f000 80aa 	beq.w	8003e80 <_svfiprintf_r+0x1c8>
 8003d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d2e:	445a      	add	r2, fp
 8003d30:	9209      	str	r2, [sp, #36]	; 0x24
 8003d32:	f89a 3000 	ldrb.w	r3, [sl]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80a2 	beq.w	8003e80 <_svfiprintf_r+0x1c8>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d46:	f10a 0a01 	add.w	sl, sl, #1
 8003d4a:	9304      	str	r3, [sp, #16]
 8003d4c:	9307      	str	r3, [sp, #28]
 8003d4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d52:	931a      	str	r3, [sp, #104]	; 0x68
 8003d54:	4654      	mov	r4, sl
 8003d56:	2205      	movs	r2, #5
 8003d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d5c:	4851      	ldr	r0, [pc, #324]	; (8003ea4 <_svfiprintf_r+0x1ec>)
 8003d5e:	f7fc fa3f 	bl	80001e0 <memchr>
 8003d62:	9a04      	ldr	r2, [sp, #16]
 8003d64:	b9d8      	cbnz	r0, 8003d9e <_svfiprintf_r+0xe6>
 8003d66:	06d0      	lsls	r0, r2, #27
 8003d68:	bf44      	itt	mi
 8003d6a:	2320      	movmi	r3, #32
 8003d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d70:	0711      	lsls	r1, r2, #28
 8003d72:	bf44      	itt	mi
 8003d74:	232b      	movmi	r3, #43	; 0x2b
 8003d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d80:	d015      	beq.n	8003dae <_svfiprintf_r+0xf6>
 8003d82:	9a07      	ldr	r2, [sp, #28]
 8003d84:	4654      	mov	r4, sl
 8003d86:	2000      	movs	r0, #0
 8003d88:	f04f 0c0a 	mov.w	ip, #10
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d92:	3b30      	subs	r3, #48	; 0x30
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d94e      	bls.n	8003e36 <_svfiprintf_r+0x17e>
 8003d98:	b1b0      	cbz	r0, 8003dc8 <_svfiprintf_r+0x110>
 8003d9a:	9207      	str	r2, [sp, #28]
 8003d9c:	e014      	b.n	8003dc8 <_svfiprintf_r+0x110>
 8003d9e:	eba0 0308 	sub.w	r3, r0, r8
 8003da2:	fa09 f303 	lsl.w	r3, r9, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	9304      	str	r3, [sp, #16]
 8003daa:	46a2      	mov	sl, r4
 8003dac:	e7d2      	b.n	8003d54 <_svfiprintf_r+0x9c>
 8003dae:	9b03      	ldr	r3, [sp, #12]
 8003db0:	1d19      	adds	r1, r3, #4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	9103      	str	r1, [sp, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	bfbb      	ittet	lt
 8003dba:	425b      	neglt	r3, r3
 8003dbc:	f042 0202 	orrlt.w	r2, r2, #2
 8003dc0:	9307      	strge	r3, [sp, #28]
 8003dc2:	9307      	strlt	r3, [sp, #28]
 8003dc4:	bfb8      	it	lt
 8003dc6:	9204      	strlt	r2, [sp, #16]
 8003dc8:	7823      	ldrb	r3, [r4, #0]
 8003dca:	2b2e      	cmp	r3, #46	; 0x2e
 8003dcc:	d10c      	bne.n	8003de8 <_svfiprintf_r+0x130>
 8003dce:	7863      	ldrb	r3, [r4, #1]
 8003dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd2:	d135      	bne.n	8003e40 <_svfiprintf_r+0x188>
 8003dd4:	9b03      	ldr	r3, [sp, #12]
 8003dd6:	1d1a      	adds	r2, r3, #4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	9203      	str	r2, [sp, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bfb8      	it	lt
 8003de0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003de4:	3402      	adds	r4, #2
 8003de6:	9305      	str	r3, [sp, #20]
 8003de8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003eb4 <_svfiprintf_r+0x1fc>
 8003dec:	7821      	ldrb	r1, [r4, #0]
 8003dee:	2203      	movs	r2, #3
 8003df0:	4650      	mov	r0, sl
 8003df2:	f7fc f9f5 	bl	80001e0 <memchr>
 8003df6:	b140      	cbz	r0, 8003e0a <_svfiprintf_r+0x152>
 8003df8:	2340      	movs	r3, #64	; 0x40
 8003dfa:	eba0 000a 	sub.w	r0, r0, sl
 8003dfe:	fa03 f000 	lsl.w	r0, r3, r0
 8003e02:	9b04      	ldr	r3, [sp, #16]
 8003e04:	4303      	orrs	r3, r0
 8003e06:	3401      	adds	r4, #1
 8003e08:	9304      	str	r3, [sp, #16]
 8003e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e0e:	4826      	ldr	r0, [pc, #152]	; (8003ea8 <_svfiprintf_r+0x1f0>)
 8003e10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e14:	2206      	movs	r2, #6
 8003e16:	f7fc f9e3 	bl	80001e0 <memchr>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d038      	beq.n	8003e90 <_svfiprintf_r+0x1d8>
 8003e1e:	4b23      	ldr	r3, [pc, #140]	; (8003eac <_svfiprintf_r+0x1f4>)
 8003e20:	bb1b      	cbnz	r3, 8003e6a <_svfiprintf_r+0x1b2>
 8003e22:	9b03      	ldr	r3, [sp, #12]
 8003e24:	3307      	adds	r3, #7
 8003e26:	f023 0307 	bic.w	r3, r3, #7
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	9303      	str	r3, [sp, #12]
 8003e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e30:	4433      	add	r3, r6
 8003e32:	9309      	str	r3, [sp, #36]	; 0x24
 8003e34:	e767      	b.n	8003d06 <_svfiprintf_r+0x4e>
 8003e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	e7a5      	b.n	8003d8c <_svfiprintf_r+0xd4>
 8003e40:	2300      	movs	r3, #0
 8003e42:	3401      	adds	r4, #1
 8003e44:	9305      	str	r3, [sp, #20]
 8003e46:	4619      	mov	r1, r3
 8003e48:	f04f 0c0a 	mov.w	ip, #10
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e52:	3a30      	subs	r2, #48	; 0x30
 8003e54:	2a09      	cmp	r2, #9
 8003e56:	d903      	bls.n	8003e60 <_svfiprintf_r+0x1a8>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0c5      	beq.n	8003de8 <_svfiprintf_r+0x130>
 8003e5c:	9105      	str	r1, [sp, #20]
 8003e5e:	e7c3      	b.n	8003de8 <_svfiprintf_r+0x130>
 8003e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e64:	4604      	mov	r4, r0
 8003e66:	2301      	movs	r3, #1
 8003e68:	e7f0      	b.n	8003e4c <_svfiprintf_r+0x194>
 8003e6a:	ab03      	add	r3, sp, #12
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	462a      	mov	r2, r5
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <_svfiprintf_r+0x1f8>)
 8003e72:	a904      	add	r1, sp, #16
 8003e74:	4638      	mov	r0, r7
 8003e76:	f3af 8000 	nop.w
 8003e7a:	1c42      	adds	r2, r0, #1
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	d1d6      	bne.n	8003e2e <_svfiprintf_r+0x176>
 8003e80:	89ab      	ldrh	r3, [r5, #12]
 8003e82:	065b      	lsls	r3, r3, #25
 8003e84:	f53f af2c 	bmi.w	8003ce0 <_svfiprintf_r+0x28>
 8003e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e8a:	b01d      	add	sp, #116	; 0x74
 8003e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e90:	ab03      	add	r3, sp, #12
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	462a      	mov	r2, r5
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <_svfiprintf_r+0x1f8>)
 8003e98:	a904      	add	r1, sp, #16
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	f000 f87a 	bl	8003f94 <_printf_i>
 8003ea0:	e7eb      	b.n	8003e7a <_svfiprintf_r+0x1c2>
 8003ea2:	bf00      	nop
 8003ea4:	08004508 	.word	0x08004508
 8003ea8:	08004512 	.word	0x08004512
 8003eac:	00000000 	.word	0x00000000
 8003eb0:	08003c01 	.word	0x08003c01
 8003eb4:	0800450e 	.word	0x0800450e

08003eb8 <_printf_common>:
 8003eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ebc:	4616      	mov	r6, r2
 8003ebe:	4699      	mov	r9, r3
 8003ec0:	688a      	ldr	r2, [r1, #8]
 8003ec2:	690b      	ldr	r3, [r1, #16]
 8003ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	bfb8      	it	lt
 8003ecc:	4613      	movlt	r3, r2
 8003ece:	6033      	str	r3, [r6, #0]
 8003ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ed4:	4607      	mov	r7, r0
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	b10a      	cbz	r2, 8003ede <_printf_common+0x26>
 8003eda:	3301      	adds	r3, #1
 8003edc:	6033      	str	r3, [r6, #0]
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	0699      	lsls	r1, r3, #26
 8003ee2:	bf42      	ittt	mi
 8003ee4:	6833      	ldrmi	r3, [r6, #0]
 8003ee6:	3302      	addmi	r3, #2
 8003ee8:	6033      	strmi	r3, [r6, #0]
 8003eea:	6825      	ldr	r5, [r4, #0]
 8003eec:	f015 0506 	ands.w	r5, r5, #6
 8003ef0:	d106      	bne.n	8003f00 <_printf_common+0x48>
 8003ef2:	f104 0a19 	add.w	sl, r4, #25
 8003ef6:	68e3      	ldr	r3, [r4, #12]
 8003ef8:	6832      	ldr	r2, [r6, #0]
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	42ab      	cmp	r3, r5
 8003efe:	dc26      	bgt.n	8003f4e <_printf_common+0x96>
 8003f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f04:	1e13      	subs	r3, r2, #0
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	bf18      	it	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	0692      	lsls	r2, r2, #26
 8003f0e:	d42b      	bmi.n	8003f68 <_printf_common+0xb0>
 8003f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f14:	4649      	mov	r1, r9
 8003f16:	4638      	mov	r0, r7
 8003f18:	47c0      	blx	r8
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d01e      	beq.n	8003f5c <_printf_common+0xa4>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	68e5      	ldr	r5, [r4, #12]
 8003f22:	6832      	ldr	r2, [r6, #0]
 8003f24:	f003 0306 	and.w	r3, r3, #6
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	bf08      	it	eq
 8003f2c:	1aad      	subeq	r5, r5, r2
 8003f2e:	68a3      	ldr	r3, [r4, #8]
 8003f30:	6922      	ldr	r2, [r4, #16]
 8003f32:	bf0c      	ite	eq
 8003f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f38:	2500      	movne	r5, #0
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	bfc4      	itt	gt
 8003f3e:	1a9b      	subgt	r3, r3, r2
 8003f40:	18ed      	addgt	r5, r5, r3
 8003f42:	2600      	movs	r6, #0
 8003f44:	341a      	adds	r4, #26
 8003f46:	42b5      	cmp	r5, r6
 8003f48:	d11a      	bne.n	8003f80 <_printf_common+0xc8>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e008      	b.n	8003f60 <_printf_common+0xa8>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4652      	mov	r2, sl
 8003f52:	4649      	mov	r1, r9
 8003f54:	4638      	mov	r0, r7
 8003f56:	47c0      	blx	r8
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d103      	bne.n	8003f64 <_printf_common+0xac>
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f64:	3501      	adds	r5, #1
 8003f66:	e7c6      	b.n	8003ef6 <_printf_common+0x3e>
 8003f68:	18e1      	adds	r1, r4, r3
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	2030      	movs	r0, #48	; 0x30
 8003f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f72:	4422      	add	r2, r4
 8003f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	e7c7      	b.n	8003f10 <_printf_common+0x58>
 8003f80:	2301      	movs	r3, #1
 8003f82:	4622      	mov	r2, r4
 8003f84:	4649      	mov	r1, r9
 8003f86:	4638      	mov	r0, r7
 8003f88:	47c0      	blx	r8
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d0e6      	beq.n	8003f5c <_printf_common+0xa4>
 8003f8e:	3601      	adds	r6, #1
 8003f90:	e7d9      	b.n	8003f46 <_printf_common+0x8e>
	...

08003f94 <_printf_i>:
 8003f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	7e0f      	ldrb	r7, [r1, #24]
 8003f9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f9c:	2f78      	cmp	r7, #120	; 0x78
 8003f9e:	4691      	mov	r9, r2
 8003fa0:	4680      	mov	r8, r0
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	469a      	mov	sl, r3
 8003fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003faa:	d807      	bhi.n	8003fbc <_printf_i+0x28>
 8003fac:	2f62      	cmp	r7, #98	; 0x62
 8003fae:	d80a      	bhi.n	8003fc6 <_printf_i+0x32>
 8003fb0:	2f00      	cmp	r7, #0
 8003fb2:	f000 80d8 	beq.w	8004166 <_printf_i+0x1d2>
 8003fb6:	2f58      	cmp	r7, #88	; 0x58
 8003fb8:	f000 80a3 	beq.w	8004102 <_printf_i+0x16e>
 8003fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fc4:	e03a      	b.n	800403c <_printf_i+0xa8>
 8003fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fca:	2b15      	cmp	r3, #21
 8003fcc:	d8f6      	bhi.n	8003fbc <_printf_i+0x28>
 8003fce:	a101      	add	r1, pc, #4	; (adr r1, 8003fd4 <_printf_i+0x40>)
 8003fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fd4:	0800402d 	.word	0x0800402d
 8003fd8:	08004041 	.word	0x08004041
 8003fdc:	08003fbd 	.word	0x08003fbd
 8003fe0:	08003fbd 	.word	0x08003fbd
 8003fe4:	08003fbd 	.word	0x08003fbd
 8003fe8:	08003fbd 	.word	0x08003fbd
 8003fec:	08004041 	.word	0x08004041
 8003ff0:	08003fbd 	.word	0x08003fbd
 8003ff4:	08003fbd 	.word	0x08003fbd
 8003ff8:	08003fbd 	.word	0x08003fbd
 8003ffc:	08003fbd 	.word	0x08003fbd
 8004000:	0800414d 	.word	0x0800414d
 8004004:	08004071 	.word	0x08004071
 8004008:	0800412f 	.word	0x0800412f
 800400c:	08003fbd 	.word	0x08003fbd
 8004010:	08003fbd 	.word	0x08003fbd
 8004014:	0800416f 	.word	0x0800416f
 8004018:	08003fbd 	.word	0x08003fbd
 800401c:	08004071 	.word	0x08004071
 8004020:	08003fbd 	.word	0x08003fbd
 8004024:	08003fbd 	.word	0x08003fbd
 8004028:	08004137 	.word	0x08004137
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	1d1a      	adds	r2, r3, #4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	602a      	str	r2, [r5, #0]
 8004034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800403c:	2301      	movs	r3, #1
 800403e:	e0a3      	b.n	8004188 <_printf_i+0x1f4>
 8004040:	6820      	ldr	r0, [r4, #0]
 8004042:	6829      	ldr	r1, [r5, #0]
 8004044:	0606      	lsls	r6, r0, #24
 8004046:	f101 0304 	add.w	r3, r1, #4
 800404a:	d50a      	bpl.n	8004062 <_printf_i+0xce>
 800404c:	680e      	ldr	r6, [r1, #0]
 800404e:	602b      	str	r3, [r5, #0]
 8004050:	2e00      	cmp	r6, #0
 8004052:	da03      	bge.n	800405c <_printf_i+0xc8>
 8004054:	232d      	movs	r3, #45	; 0x2d
 8004056:	4276      	negs	r6, r6
 8004058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800405c:	485e      	ldr	r0, [pc, #376]	; (80041d8 <_printf_i+0x244>)
 800405e:	230a      	movs	r3, #10
 8004060:	e019      	b.n	8004096 <_printf_i+0x102>
 8004062:	680e      	ldr	r6, [r1, #0]
 8004064:	602b      	str	r3, [r5, #0]
 8004066:	f010 0f40 	tst.w	r0, #64	; 0x40
 800406a:	bf18      	it	ne
 800406c:	b236      	sxthne	r6, r6
 800406e:	e7ef      	b.n	8004050 <_printf_i+0xbc>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	6820      	ldr	r0, [r4, #0]
 8004074:	1d19      	adds	r1, r3, #4
 8004076:	6029      	str	r1, [r5, #0]
 8004078:	0601      	lsls	r1, r0, #24
 800407a:	d501      	bpl.n	8004080 <_printf_i+0xec>
 800407c:	681e      	ldr	r6, [r3, #0]
 800407e:	e002      	b.n	8004086 <_printf_i+0xf2>
 8004080:	0646      	lsls	r6, r0, #25
 8004082:	d5fb      	bpl.n	800407c <_printf_i+0xe8>
 8004084:	881e      	ldrh	r6, [r3, #0]
 8004086:	4854      	ldr	r0, [pc, #336]	; (80041d8 <_printf_i+0x244>)
 8004088:	2f6f      	cmp	r7, #111	; 0x6f
 800408a:	bf0c      	ite	eq
 800408c:	2308      	moveq	r3, #8
 800408e:	230a      	movne	r3, #10
 8004090:	2100      	movs	r1, #0
 8004092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004096:	6865      	ldr	r5, [r4, #4]
 8004098:	60a5      	str	r5, [r4, #8]
 800409a:	2d00      	cmp	r5, #0
 800409c:	bfa2      	ittt	ge
 800409e:	6821      	ldrge	r1, [r4, #0]
 80040a0:	f021 0104 	bicge.w	r1, r1, #4
 80040a4:	6021      	strge	r1, [r4, #0]
 80040a6:	b90e      	cbnz	r6, 80040ac <_printf_i+0x118>
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	d04d      	beq.n	8004148 <_printf_i+0x1b4>
 80040ac:	4615      	mov	r5, r2
 80040ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80040b2:	fb03 6711 	mls	r7, r3, r1, r6
 80040b6:	5dc7      	ldrb	r7, [r0, r7]
 80040b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040bc:	4637      	mov	r7, r6
 80040be:	42bb      	cmp	r3, r7
 80040c0:	460e      	mov	r6, r1
 80040c2:	d9f4      	bls.n	80040ae <_printf_i+0x11a>
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d10b      	bne.n	80040e0 <_printf_i+0x14c>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	07de      	lsls	r6, r3, #31
 80040cc:	d508      	bpl.n	80040e0 <_printf_i+0x14c>
 80040ce:	6923      	ldr	r3, [r4, #16]
 80040d0:	6861      	ldr	r1, [r4, #4]
 80040d2:	4299      	cmp	r1, r3
 80040d4:	bfde      	ittt	le
 80040d6:	2330      	movle	r3, #48	; 0x30
 80040d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040e0:	1b52      	subs	r2, r2, r5
 80040e2:	6122      	str	r2, [r4, #16]
 80040e4:	f8cd a000 	str.w	sl, [sp]
 80040e8:	464b      	mov	r3, r9
 80040ea:	aa03      	add	r2, sp, #12
 80040ec:	4621      	mov	r1, r4
 80040ee:	4640      	mov	r0, r8
 80040f0:	f7ff fee2 	bl	8003eb8 <_printf_common>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d14c      	bne.n	8004192 <_printf_i+0x1fe>
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040fc:	b004      	add	sp, #16
 80040fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004102:	4835      	ldr	r0, [pc, #212]	; (80041d8 <_printf_i+0x244>)
 8004104:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004108:	6829      	ldr	r1, [r5, #0]
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004110:	6029      	str	r1, [r5, #0]
 8004112:	061d      	lsls	r5, r3, #24
 8004114:	d514      	bpl.n	8004140 <_printf_i+0x1ac>
 8004116:	07df      	lsls	r7, r3, #31
 8004118:	bf44      	itt	mi
 800411a:	f043 0320 	orrmi.w	r3, r3, #32
 800411e:	6023      	strmi	r3, [r4, #0]
 8004120:	b91e      	cbnz	r6, 800412a <_printf_i+0x196>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	f023 0320 	bic.w	r3, r3, #32
 8004128:	6023      	str	r3, [r4, #0]
 800412a:	2310      	movs	r3, #16
 800412c:	e7b0      	b.n	8004090 <_printf_i+0xfc>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	f043 0320 	orr.w	r3, r3, #32
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	2378      	movs	r3, #120	; 0x78
 8004138:	4828      	ldr	r0, [pc, #160]	; (80041dc <_printf_i+0x248>)
 800413a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800413e:	e7e3      	b.n	8004108 <_printf_i+0x174>
 8004140:	0659      	lsls	r1, r3, #25
 8004142:	bf48      	it	mi
 8004144:	b2b6      	uxthmi	r6, r6
 8004146:	e7e6      	b.n	8004116 <_printf_i+0x182>
 8004148:	4615      	mov	r5, r2
 800414a:	e7bb      	b.n	80040c4 <_printf_i+0x130>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	6826      	ldr	r6, [r4, #0]
 8004150:	6961      	ldr	r1, [r4, #20]
 8004152:	1d18      	adds	r0, r3, #4
 8004154:	6028      	str	r0, [r5, #0]
 8004156:	0635      	lsls	r5, r6, #24
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	d501      	bpl.n	8004160 <_printf_i+0x1cc>
 800415c:	6019      	str	r1, [r3, #0]
 800415e:	e002      	b.n	8004166 <_printf_i+0x1d2>
 8004160:	0670      	lsls	r0, r6, #25
 8004162:	d5fb      	bpl.n	800415c <_printf_i+0x1c8>
 8004164:	8019      	strh	r1, [r3, #0]
 8004166:	2300      	movs	r3, #0
 8004168:	6123      	str	r3, [r4, #16]
 800416a:	4615      	mov	r5, r2
 800416c:	e7ba      	b.n	80040e4 <_printf_i+0x150>
 800416e:	682b      	ldr	r3, [r5, #0]
 8004170:	1d1a      	adds	r2, r3, #4
 8004172:	602a      	str	r2, [r5, #0]
 8004174:	681d      	ldr	r5, [r3, #0]
 8004176:	6862      	ldr	r2, [r4, #4]
 8004178:	2100      	movs	r1, #0
 800417a:	4628      	mov	r0, r5
 800417c:	f7fc f830 	bl	80001e0 <memchr>
 8004180:	b108      	cbz	r0, 8004186 <_printf_i+0x1f2>
 8004182:	1b40      	subs	r0, r0, r5
 8004184:	6060      	str	r0, [r4, #4]
 8004186:	6863      	ldr	r3, [r4, #4]
 8004188:	6123      	str	r3, [r4, #16]
 800418a:	2300      	movs	r3, #0
 800418c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004190:	e7a8      	b.n	80040e4 <_printf_i+0x150>
 8004192:	6923      	ldr	r3, [r4, #16]
 8004194:	462a      	mov	r2, r5
 8004196:	4649      	mov	r1, r9
 8004198:	4640      	mov	r0, r8
 800419a:	47d0      	blx	sl
 800419c:	3001      	adds	r0, #1
 800419e:	d0ab      	beq.n	80040f8 <_printf_i+0x164>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	079b      	lsls	r3, r3, #30
 80041a4:	d413      	bmi.n	80041ce <_printf_i+0x23a>
 80041a6:	68e0      	ldr	r0, [r4, #12]
 80041a8:	9b03      	ldr	r3, [sp, #12]
 80041aa:	4298      	cmp	r0, r3
 80041ac:	bfb8      	it	lt
 80041ae:	4618      	movlt	r0, r3
 80041b0:	e7a4      	b.n	80040fc <_printf_i+0x168>
 80041b2:	2301      	movs	r3, #1
 80041b4:	4632      	mov	r2, r6
 80041b6:	4649      	mov	r1, r9
 80041b8:	4640      	mov	r0, r8
 80041ba:	47d0      	blx	sl
 80041bc:	3001      	adds	r0, #1
 80041be:	d09b      	beq.n	80040f8 <_printf_i+0x164>
 80041c0:	3501      	adds	r5, #1
 80041c2:	68e3      	ldr	r3, [r4, #12]
 80041c4:	9903      	ldr	r1, [sp, #12]
 80041c6:	1a5b      	subs	r3, r3, r1
 80041c8:	42ab      	cmp	r3, r5
 80041ca:	dcf2      	bgt.n	80041b2 <_printf_i+0x21e>
 80041cc:	e7eb      	b.n	80041a6 <_printf_i+0x212>
 80041ce:	2500      	movs	r5, #0
 80041d0:	f104 0619 	add.w	r6, r4, #25
 80041d4:	e7f5      	b.n	80041c2 <_printf_i+0x22e>
 80041d6:	bf00      	nop
 80041d8:	08004519 	.word	0x08004519
 80041dc:	0800452a 	.word	0x0800452a

080041e0 <memcpy>:
 80041e0:	440a      	add	r2, r1
 80041e2:	4291      	cmp	r1, r2
 80041e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80041e8:	d100      	bne.n	80041ec <memcpy+0xc>
 80041ea:	4770      	bx	lr
 80041ec:	b510      	push	{r4, lr}
 80041ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f6:	4291      	cmp	r1, r2
 80041f8:	d1f9      	bne.n	80041ee <memcpy+0xe>
 80041fa:	bd10      	pop	{r4, pc}

080041fc <memmove>:
 80041fc:	4288      	cmp	r0, r1
 80041fe:	b510      	push	{r4, lr}
 8004200:	eb01 0402 	add.w	r4, r1, r2
 8004204:	d902      	bls.n	800420c <memmove+0x10>
 8004206:	4284      	cmp	r4, r0
 8004208:	4623      	mov	r3, r4
 800420a:	d807      	bhi.n	800421c <memmove+0x20>
 800420c:	1e43      	subs	r3, r0, #1
 800420e:	42a1      	cmp	r1, r4
 8004210:	d008      	beq.n	8004224 <memmove+0x28>
 8004212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800421a:	e7f8      	b.n	800420e <memmove+0x12>
 800421c:	4402      	add	r2, r0
 800421e:	4601      	mov	r1, r0
 8004220:	428a      	cmp	r2, r1
 8004222:	d100      	bne.n	8004226 <memmove+0x2a>
 8004224:	bd10      	pop	{r4, pc}
 8004226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800422a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800422e:	e7f7      	b.n	8004220 <memmove+0x24>

08004230 <_free_r>:
 8004230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004232:	2900      	cmp	r1, #0
 8004234:	d044      	beq.n	80042c0 <_free_r+0x90>
 8004236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800423a:	9001      	str	r0, [sp, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f1a1 0404 	sub.w	r4, r1, #4
 8004242:	bfb8      	it	lt
 8004244:	18e4      	addlt	r4, r4, r3
 8004246:	f000 f913 	bl	8004470 <__malloc_lock>
 800424a:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <_free_r+0x94>)
 800424c:	9801      	ldr	r0, [sp, #4]
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	b933      	cbnz	r3, 8004260 <_free_r+0x30>
 8004252:	6063      	str	r3, [r4, #4]
 8004254:	6014      	str	r4, [r2, #0]
 8004256:	b003      	add	sp, #12
 8004258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800425c:	f000 b90e 	b.w	800447c <__malloc_unlock>
 8004260:	42a3      	cmp	r3, r4
 8004262:	d908      	bls.n	8004276 <_free_r+0x46>
 8004264:	6825      	ldr	r5, [r4, #0]
 8004266:	1961      	adds	r1, r4, r5
 8004268:	428b      	cmp	r3, r1
 800426a:	bf01      	itttt	eq
 800426c:	6819      	ldreq	r1, [r3, #0]
 800426e:	685b      	ldreq	r3, [r3, #4]
 8004270:	1949      	addeq	r1, r1, r5
 8004272:	6021      	streq	r1, [r4, #0]
 8004274:	e7ed      	b.n	8004252 <_free_r+0x22>
 8004276:	461a      	mov	r2, r3
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	b10b      	cbz	r3, 8004280 <_free_r+0x50>
 800427c:	42a3      	cmp	r3, r4
 800427e:	d9fa      	bls.n	8004276 <_free_r+0x46>
 8004280:	6811      	ldr	r1, [r2, #0]
 8004282:	1855      	adds	r5, r2, r1
 8004284:	42a5      	cmp	r5, r4
 8004286:	d10b      	bne.n	80042a0 <_free_r+0x70>
 8004288:	6824      	ldr	r4, [r4, #0]
 800428a:	4421      	add	r1, r4
 800428c:	1854      	adds	r4, r2, r1
 800428e:	42a3      	cmp	r3, r4
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	d1e0      	bne.n	8004256 <_free_r+0x26>
 8004294:	681c      	ldr	r4, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	6053      	str	r3, [r2, #4]
 800429a:	4421      	add	r1, r4
 800429c:	6011      	str	r1, [r2, #0]
 800429e:	e7da      	b.n	8004256 <_free_r+0x26>
 80042a0:	d902      	bls.n	80042a8 <_free_r+0x78>
 80042a2:	230c      	movs	r3, #12
 80042a4:	6003      	str	r3, [r0, #0]
 80042a6:	e7d6      	b.n	8004256 <_free_r+0x26>
 80042a8:	6825      	ldr	r5, [r4, #0]
 80042aa:	1961      	adds	r1, r4, r5
 80042ac:	428b      	cmp	r3, r1
 80042ae:	bf04      	itt	eq
 80042b0:	6819      	ldreq	r1, [r3, #0]
 80042b2:	685b      	ldreq	r3, [r3, #4]
 80042b4:	6063      	str	r3, [r4, #4]
 80042b6:	bf04      	itt	eq
 80042b8:	1949      	addeq	r1, r1, r5
 80042ba:	6021      	streq	r1, [r4, #0]
 80042bc:	6054      	str	r4, [r2, #4]
 80042be:	e7ca      	b.n	8004256 <_free_r+0x26>
 80042c0:	b003      	add	sp, #12
 80042c2:	bd30      	pop	{r4, r5, pc}
 80042c4:	200004b4 	.word	0x200004b4

080042c8 <sbrk_aligned>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	4e0e      	ldr	r6, [pc, #56]	; (8004304 <sbrk_aligned+0x3c>)
 80042cc:	460c      	mov	r4, r1
 80042ce:	6831      	ldr	r1, [r6, #0]
 80042d0:	4605      	mov	r5, r0
 80042d2:	b911      	cbnz	r1, 80042da <sbrk_aligned+0x12>
 80042d4:	f000 f8bc 	bl	8004450 <_sbrk_r>
 80042d8:	6030      	str	r0, [r6, #0]
 80042da:	4621      	mov	r1, r4
 80042dc:	4628      	mov	r0, r5
 80042de:	f000 f8b7 	bl	8004450 <_sbrk_r>
 80042e2:	1c43      	adds	r3, r0, #1
 80042e4:	d00a      	beq.n	80042fc <sbrk_aligned+0x34>
 80042e6:	1cc4      	adds	r4, r0, #3
 80042e8:	f024 0403 	bic.w	r4, r4, #3
 80042ec:	42a0      	cmp	r0, r4
 80042ee:	d007      	beq.n	8004300 <sbrk_aligned+0x38>
 80042f0:	1a21      	subs	r1, r4, r0
 80042f2:	4628      	mov	r0, r5
 80042f4:	f000 f8ac 	bl	8004450 <_sbrk_r>
 80042f8:	3001      	adds	r0, #1
 80042fa:	d101      	bne.n	8004300 <sbrk_aligned+0x38>
 80042fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004300:	4620      	mov	r0, r4
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	200004b8 	.word	0x200004b8

08004308 <_malloc_r>:
 8004308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800430c:	1ccd      	adds	r5, r1, #3
 800430e:	f025 0503 	bic.w	r5, r5, #3
 8004312:	3508      	adds	r5, #8
 8004314:	2d0c      	cmp	r5, #12
 8004316:	bf38      	it	cc
 8004318:	250c      	movcc	r5, #12
 800431a:	2d00      	cmp	r5, #0
 800431c:	4607      	mov	r7, r0
 800431e:	db01      	blt.n	8004324 <_malloc_r+0x1c>
 8004320:	42a9      	cmp	r1, r5
 8004322:	d905      	bls.n	8004330 <_malloc_r+0x28>
 8004324:	230c      	movs	r3, #12
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	2600      	movs	r6, #0
 800432a:	4630      	mov	r0, r6
 800432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004330:	4e2e      	ldr	r6, [pc, #184]	; (80043ec <_malloc_r+0xe4>)
 8004332:	f000 f89d 	bl	8004470 <__malloc_lock>
 8004336:	6833      	ldr	r3, [r6, #0]
 8004338:	461c      	mov	r4, r3
 800433a:	bb34      	cbnz	r4, 800438a <_malloc_r+0x82>
 800433c:	4629      	mov	r1, r5
 800433e:	4638      	mov	r0, r7
 8004340:	f7ff ffc2 	bl	80042c8 <sbrk_aligned>
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	4604      	mov	r4, r0
 8004348:	d14d      	bne.n	80043e6 <_malloc_r+0xde>
 800434a:	6834      	ldr	r4, [r6, #0]
 800434c:	4626      	mov	r6, r4
 800434e:	2e00      	cmp	r6, #0
 8004350:	d140      	bne.n	80043d4 <_malloc_r+0xcc>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	4631      	mov	r1, r6
 8004356:	4638      	mov	r0, r7
 8004358:	eb04 0803 	add.w	r8, r4, r3
 800435c:	f000 f878 	bl	8004450 <_sbrk_r>
 8004360:	4580      	cmp	r8, r0
 8004362:	d13a      	bne.n	80043da <_malloc_r+0xd2>
 8004364:	6821      	ldr	r1, [r4, #0]
 8004366:	3503      	adds	r5, #3
 8004368:	1a6d      	subs	r5, r5, r1
 800436a:	f025 0503 	bic.w	r5, r5, #3
 800436e:	3508      	adds	r5, #8
 8004370:	2d0c      	cmp	r5, #12
 8004372:	bf38      	it	cc
 8004374:	250c      	movcc	r5, #12
 8004376:	4629      	mov	r1, r5
 8004378:	4638      	mov	r0, r7
 800437a:	f7ff ffa5 	bl	80042c8 <sbrk_aligned>
 800437e:	3001      	adds	r0, #1
 8004380:	d02b      	beq.n	80043da <_malloc_r+0xd2>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	442b      	add	r3, r5
 8004386:	6023      	str	r3, [r4, #0]
 8004388:	e00e      	b.n	80043a8 <_malloc_r+0xa0>
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	1b52      	subs	r2, r2, r5
 800438e:	d41e      	bmi.n	80043ce <_malloc_r+0xc6>
 8004390:	2a0b      	cmp	r2, #11
 8004392:	d916      	bls.n	80043c2 <_malloc_r+0xba>
 8004394:	1961      	adds	r1, r4, r5
 8004396:	42a3      	cmp	r3, r4
 8004398:	6025      	str	r5, [r4, #0]
 800439a:	bf18      	it	ne
 800439c:	6059      	strne	r1, [r3, #4]
 800439e:	6863      	ldr	r3, [r4, #4]
 80043a0:	bf08      	it	eq
 80043a2:	6031      	streq	r1, [r6, #0]
 80043a4:	5162      	str	r2, [r4, r5]
 80043a6:	604b      	str	r3, [r1, #4]
 80043a8:	4638      	mov	r0, r7
 80043aa:	f104 060b 	add.w	r6, r4, #11
 80043ae:	f000 f865 	bl	800447c <__malloc_unlock>
 80043b2:	f026 0607 	bic.w	r6, r6, #7
 80043b6:	1d23      	adds	r3, r4, #4
 80043b8:	1af2      	subs	r2, r6, r3
 80043ba:	d0b6      	beq.n	800432a <_malloc_r+0x22>
 80043bc:	1b9b      	subs	r3, r3, r6
 80043be:	50a3      	str	r3, [r4, r2]
 80043c0:	e7b3      	b.n	800432a <_malloc_r+0x22>
 80043c2:	6862      	ldr	r2, [r4, #4]
 80043c4:	42a3      	cmp	r3, r4
 80043c6:	bf0c      	ite	eq
 80043c8:	6032      	streq	r2, [r6, #0]
 80043ca:	605a      	strne	r2, [r3, #4]
 80043cc:	e7ec      	b.n	80043a8 <_malloc_r+0xa0>
 80043ce:	4623      	mov	r3, r4
 80043d0:	6864      	ldr	r4, [r4, #4]
 80043d2:	e7b2      	b.n	800433a <_malloc_r+0x32>
 80043d4:	4634      	mov	r4, r6
 80043d6:	6876      	ldr	r6, [r6, #4]
 80043d8:	e7b9      	b.n	800434e <_malloc_r+0x46>
 80043da:	230c      	movs	r3, #12
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4638      	mov	r0, r7
 80043e0:	f000 f84c 	bl	800447c <__malloc_unlock>
 80043e4:	e7a1      	b.n	800432a <_malloc_r+0x22>
 80043e6:	6025      	str	r5, [r4, #0]
 80043e8:	e7de      	b.n	80043a8 <_malloc_r+0xa0>
 80043ea:	bf00      	nop
 80043ec:	200004b4 	.word	0x200004b4

080043f0 <_realloc_r>:
 80043f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f4:	4680      	mov	r8, r0
 80043f6:	4614      	mov	r4, r2
 80043f8:	460e      	mov	r6, r1
 80043fa:	b921      	cbnz	r1, 8004406 <_realloc_r+0x16>
 80043fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004400:	4611      	mov	r1, r2
 8004402:	f7ff bf81 	b.w	8004308 <_malloc_r>
 8004406:	b92a      	cbnz	r2, 8004414 <_realloc_r+0x24>
 8004408:	f7ff ff12 	bl	8004230 <_free_r>
 800440c:	4625      	mov	r5, r4
 800440e:	4628      	mov	r0, r5
 8004410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004414:	f000 f838 	bl	8004488 <_malloc_usable_size_r>
 8004418:	4284      	cmp	r4, r0
 800441a:	4607      	mov	r7, r0
 800441c:	d802      	bhi.n	8004424 <_realloc_r+0x34>
 800441e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004422:	d812      	bhi.n	800444a <_realloc_r+0x5a>
 8004424:	4621      	mov	r1, r4
 8004426:	4640      	mov	r0, r8
 8004428:	f7ff ff6e 	bl	8004308 <_malloc_r>
 800442c:	4605      	mov	r5, r0
 800442e:	2800      	cmp	r0, #0
 8004430:	d0ed      	beq.n	800440e <_realloc_r+0x1e>
 8004432:	42bc      	cmp	r4, r7
 8004434:	4622      	mov	r2, r4
 8004436:	4631      	mov	r1, r6
 8004438:	bf28      	it	cs
 800443a:	463a      	movcs	r2, r7
 800443c:	f7ff fed0 	bl	80041e0 <memcpy>
 8004440:	4631      	mov	r1, r6
 8004442:	4640      	mov	r0, r8
 8004444:	f7ff fef4 	bl	8004230 <_free_r>
 8004448:	e7e1      	b.n	800440e <_realloc_r+0x1e>
 800444a:	4635      	mov	r5, r6
 800444c:	e7df      	b.n	800440e <_realloc_r+0x1e>
	...

08004450 <_sbrk_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	4d06      	ldr	r5, [pc, #24]	; (800446c <_sbrk_r+0x1c>)
 8004454:	2300      	movs	r3, #0
 8004456:	4604      	mov	r4, r0
 8004458:	4608      	mov	r0, r1
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	f7fc fab4 	bl	80009c8 <_sbrk>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d102      	bne.n	800446a <_sbrk_r+0x1a>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	b103      	cbz	r3, 800446a <_sbrk_r+0x1a>
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	200004bc 	.word	0x200004bc

08004470 <__malloc_lock>:
 8004470:	4801      	ldr	r0, [pc, #4]	; (8004478 <__malloc_lock+0x8>)
 8004472:	f000 b811 	b.w	8004498 <__retarget_lock_acquire_recursive>
 8004476:	bf00      	nop
 8004478:	200004c0 	.word	0x200004c0

0800447c <__malloc_unlock>:
 800447c:	4801      	ldr	r0, [pc, #4]	; (8004484 <__malloc_unlock+0x8>)
 800447e:	f000 b80c 	b.w	800449a <__retarget_lock_release_recursive>
 8004482:	bf00      	nop
 8004484:	200004c0 	.word	0x200004c0

08004488 <_malloc_usable_size_r>:
 8004488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800448c:	1f18      	subs	r0, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	bfbc      	itt	lt
 8004492:	580b      	ldrlt	r3, [r1, r0]
 8004494:	18c0      	addlt	r0, r0, r3
 8004496:	4770      	bx	lr

08004498 <__retarget_lock_acquire_recursive>:
 8004498:	4770      	bx	lr

0800449a <__retarget_lock_release_recursive>:
 800449a:	4770      	bx	lr

0800449c <_init>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr

080044a8 <_fini>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr
